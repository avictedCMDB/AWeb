package com.avic.management.controllers.bid;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.PropertiesEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MaxUploadSizeExceededException;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.avic.common.beans.ResultObject;
import com.avic.common.constants.SmsContents;
import com.avic.common.constants.UserRole;
import com.avic.common.exceptions.NoPermissionException;
import com.avic.common.exceptions.UserNotLoginException;
import com.avic.common.shortMessage.ShortMessageUtils;
import com.avic.common.utils.Permission;
import com.avic.management.models.BidContractFile;
import com.avic.management.models.BidProjMateriel;
import com.avic.management.models.BidProjSupplier;
import com.avic.management.models.BidProject;
import com.avic.management.models.CodeList;
import com.avic.management.models.SupArea;
import com.avic.management.models.SupInfo;
import com.avic.management.services.BidProjectService;
import com.avic.management.services.CodeListService;
import com.avic.management.services.SupAreaService;
import com.avic.management.services.SupInfoService;
import com.avic.passport.models.User;
import com.avic.supplier.utils.ReadExcel;

@Controller
@RequestMapping("/bid/{mf:publish|project}")
public class PublishController {
    protected static final Log logger = LogFactory.getLog(PublishController.class);

    SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");

    @Autowired
    CodeListService codeListService;

    @Autowired
    SupInfoService supInfoService;

    @Autowired
    SupAreaService supAreaService;

    @Autowired
    BidProjectService bidProjectService;

    @RequestMapping("")
    public String index(HttpSession sess, Map<String, Object> map) {
        logger.info("发布竞价采购");
        User user = null;
        try {
            user = Permission.check(sess, UserRole.BUY, UserRole.CLIENT);
        } catch (UserNotLoginException e) {
            return "redirect:/passport/login";
        } catch (NoPermissionException e) {
            return "redirect:/passport/login";
        }
        CodeList param = new CodeList();
        param.setCodeListType("BID_CAT");

        List<CodeList> cats = codeListService.queryCodes(param);
        param.setCodeListType("CURRENCY");
        List<CodeList> currencys = codeListService.queryCodes(param);

        String now = df.format(new Date());

        SupArea area = new SupArea();
        area.setSupID("1");

        map.put("provs", supAreaService.queryAreas(area));
        map.put("cats", cats);
        map.put("currencys", currencys);
        map.put("act", "publish");
        map.put("projId", "ZB-" + now.substring(0, 8) + "-" + now.substring(8));

        return "bid/publish";
    }

    @RequestMapping("/edit")
    public String edit(@RequestParam("projId") String projId, HttpSession sess, Map<String, Object> map) {
        logger.info("编辑竞价采购");
        User user = null;
        try {
            user = Permission.check(sess, UserRole.BUY, UserRole.CLIENT);
        } catch (UserNotLoginException e) {
            return "redirect:/passport/login";
        } catch (NoPermissionException e) {
            return "redirect:/passport/login";
        }

        BidProject proj = bidProjectService.queryProjectDetail(projId);

        if (proj == null || !proj.getUserId().equals(user.getUserId()) || proj.getProjStatus() != 1) {
            throw new IllegalArgumentException();
        }

        CodeList param = new CodeList();
        param.setCodeListType("BID_CAT");

        List<CodeList> cats = codeListService.queryCodes(param);
        param.setCodeListType("CURRENCY");
        List<CodeList> currencys = codeListService.queryCodes(param);

        SupArea area = new SupArea();
        area.setSupID("1");

        map.put("provs", supAreaService.queryAreas(area));
        map.put("cats", cats);
        map.put("currencys", currencys);
        map.put("act", "project");
        map.put("func", "edit");
        map.put("projId", projId);
        map.put("proj", proj);

        return "bid/publish";
    }


    @RequestMapping("/detail")
    public String detail(@RequestParam("projId") String projId, HttpSession sess, Map<String, Object> map) {
        logger.info("查看竞价采购");
        User user = null;
        try {
            user = Permission.check(sess, UserRole.BUY, UserRole.CLIENT);
        } catch (UserNotLoginException e) {
            return "redirect:/passport/login";
        } catch (NoPermissionException e) {
            return "redirect:/passport/login";
        }

        BidProject proj = bidProjectService.queryProjectDetail(projId);

        if (proj == null) {
            throw new IllegalArgumentException();
        }

        CodeList param = new CodeList();
        param.setCodeListType("BID_CAT");

        List<CodeList> cats = codeListService.queryCodes(param);
        param.setCodeListType("CURRENCY");
        List<CodeList> currencys = codeListService.queryCodes(param);

        map.put("cats", cats);
        map.put("currencys", currencys);
        map.put("act", "project");
        map.put("func", "detail");
        map.put("ro", "disabled='disabled'");
        map.put("projId", projId);
        map.put("proj", proj);

        return "bid/publish";
    }

    @RequestMapping("/mtr/template")
    public void mtrTemplate(HttpServletRequest reqeust, HttpServletResponse response) throws UnsupportedEncodingException {
        response.setCharacterEncoding("UTF-8");
        response.setContentType("multipart/form-data");
        String fileName = reqeust.getSession().getServletContext().getRealPath("/") + "/download/mtr_temp.xls";
        response.setHeader("Content-Disposition", "attachment;fileName=" + java.net.URLEncoder.encode("物料导入模板.xls", "UTF-8"));
        try {
            File file = new File(fileName);
            InputStream inputStream = new FileInputStream(file);
            OutputStream os = response.getOutputStream();
            byte[] b = new byte[1024];
            int length;
            while ((length = inputStream.read(b)) > 0) {
                os.write(b, 0, length);
            }
            inputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @RequestMapping("/mtr/import")
    public String mtrImport(@RequestParam(value = "mtr_file") MultipartFile file, HttpServletRequest req, Map<String, Object> map) {
        if (file.isEmpty()) {
            map.put("result", "-1");
            map.put("fail", "请上传导入文件");
        } else {
            String excelVersion = "";
            String old = file.getOriginalFilename();
            String postfix = old.substring(old.lastIndexOf("."), old.length());
            if (".xlsx".equals(postfix)) {
                excelVersion = "2007";
            } else if (".xls".equals(postfix)) {
                excelVersion = "2003";
            }
            List<List<String>> data = null;
            List<BidProjMateriel> mtr = null;
            try {
                data = ReadExcel.readExcelFile(file.getInputStream(), excelVersion);

            } catch (Exception e) {
                map.put("result", "-1");
                map.put("fail", "上传的文件解析失败，请使用指定的模板文件！");
            }

            if (data == null || data.isEmpty()) {
                map.put("result", "-1");
                map.put("fail", "数据为空");
            } else {
               try{           	            	
                mtr = new ArrayList<BidProjMateriel>();
                List<String> error = new ArrayList<String>();
                for (int i = 0; i < data.size(); i++) {
                    List<String> item = data.get(i);

                    BidProjMateriel m = new BidProjMateriel();
                    boolean flag = true;
                    if (StringUtils.isEmpty(item.get(0))) {
                        error.add("第" + (i + 1) + "行，物料名称不能为空");
                        flag = false;
                    }

                    if (StringUtils.isEmpty(item.get(1)) || !StringUtils.isNumeric(item.get(1))) {
                        error.add("第" + (i + 1) + "行，数量不能为空且必须为数字");
                        flag = false;
                    }
                    if (StringUtils.isEmpty(item.get(2))) {
                        error.add("第" + (i + 1) + "行，单位不能为空");
                        flag = false;
                    }
                    if (StringUtils.isEmpty(item.get(3))) {
                        error.add("第" + (i + 1) + "行，品牌厂商不能为空");
                        flag = false;
                    }
                    if (StringUtils.isEmpty(item.get(4))) {
                        error.add("第" + (i + 1) + "行，型号不能为空");
                        flag = false;
                    }

                    if (flag) {
                        m.setMaterName(item.get(0));
                        m.setMaterNum(Integer.parseInt(item.get(1)));
                        m.setMaterUnit(item.get(2));
                        m.setMaterBrand(item.get(3));
                        m.setMaterModel(item.get(4));
                        m.setMaterPrice(item.get(5));
                        m.setIfStandard(item.get(6));
                        m.setSaleService(item.get(7));
                        m.setSpecConf(item.get(8));
                        mtr.add(m);
                    }
                }
                if (error.isEmpty()) {
                    map.put("result", "1");
                    try {
                        map.put("data", new ObjectMapper().writeValueAsString(mtr));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    map.put("result", "-1");
                    map.put("fail", StringUtils.join(error, "<br/>"));
                }}
                catch (Exception e) {
                    map.put("result", "-1");
                    map.put("fail", "上传的文件解析失败，请使用指定的模板文件！");
                } 
            }
        }

        return "bid/upload_callback";
    }

    @RequestMapping("/mtr/query")
    @ResponseBody
    public ResultObject mtrQuery(@RequestParam("name") String name, @RequestParam(value = "page", defaultValue = "1") int page,
            HttpSession sess) {

        User user = null;
        try {
            user = Permission.check(sess, UserRole.BUY, UserRole.CLIENT);
        } catch (Exception e) {
            return new ResultObject(ResultObject.FAIL, "未登录或无权限");
        }

        int total = bidProjectService.queryHistoryMaterielCount(name, user.getUserId());

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (page > pages) {
            page = pages;
        }

        Map<String, Object> map = new HashMap<String, Object>();
        if (total > 0) {
            map.put("data", bidProjectService.queryHistoryMaterielList(name, user.getUserId(), page, PAGE_SIZE));
        }
        map.put("pages", pages);
        return new ResultObject(ResultObject.OK, map);
    }

    @RequestMapping("/subject/no")
    @ResponseBody
    public ResultObject subjectNo() {
        String now = df.format(new Date());
        return new ResultObject(ResultObject.OK, "BD-" + now.substring(0, 8) + "-" + now.substring(8));
    }

    static final int PAGE_SIZE = 8;

    @RequestMapping("/supplier/query")
    @ResponseBody
    public ResultObject supplierQuery(@RequestParam("sup_code") String supCode, @RequestParam("sup_name") String supName,
            @RequestParam("contact_person") String contactPerson, @RequestParam("contact_num") String contactNum,
            @RequestParam(value = "page", defaultValue = "1") int page) {

        int total = supInfoService.queryBidSupInfoCount(supCode, supName, contactPerson, contactNum);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (page > pages) {
            page = pages;
        }

        Map<String, Object> map = new HashMap<String, Object>();
        if (total > 0) {
            map.put("data", supInfoService.queryBidSupInfoList(supCode, supName, contactPerson, contactNum, page, PAGE_SIZE));
        }

        map.put("pages", pages);
        return new ResultObject(ResultObject.OK, map);
    }

    @RequestMapping("/area")
    @ResponseBody
    public ResultObject area(@RequestParam("area") String area) {
        SupArea param = new SupArea();
        param.setSupID("1");
        param.setSupParentArea(area);
        return new ResultObject(ResultObject.OK, supAreaService.querySubAreas(param));
    }

    @RequestMapping("/upload")
    public String upload(@RequestParam(value = "attach_file") MultipartFile file, HttpServletRequest req, Map<String, Object> map) {
        if (file.isEmpty()) {
            map.put("result", "-1");
            map.put("fail", "请上传文件");
        } else {
            String ym = new SimpleDateFormat("yyyyMMdd").format(new Date());
            String path = "/upload/bid/" + ym + "/";
            String orgFileName = file.getOriginalFilename();

            String ext = "";
            if (orgFileName.indexOf(".") > 0) {
                ext = orgFileName.substring(orgFileName.lastIndexOf(".") + 1);
            }

            if (checkTypes(DOCS, ext)) {
                String uuid = UUID.randomUUID().toString().replaceAll("-", "");
                String fileName = uuid + "." + ext;

                File targetFile = new File(req.getSession().getServletContext().getRealPath("/") + path, fileName);
                if (!targetFile.exists()) {
                    targetFile.mkdirs();
                }

                try {
                    file.transferTo(targetFile);
                    map.put("result", "1");
                    Map<String, String> data = new HashMap<String, String>();
                    data.put("name", orgFileName);
                    data.put("path", path + "/" + fileName);
                    map.put("data", new ObjectMapper().writeValueAsString(data));
                } catch (Exception e) {
                    map.put("result", "0");
                    map.put("fail", "写入文件失败");
                }
            } else {
                map.put("result", "0");
                map.put("fail", "不支持文件类型【" + ext + "】");
            }
        }

        return "bid/upload_callback";
    }

    private static final String[] DOCS = new String[] { "pdf", "doc", "docx", "xls", "xlsx", "ppt", "pptx", "rar", "zip" };

    private boolean checkTypes(String[] types, String ext) {
        for (String i : types) {
            if (i.equals(ext)) {
                return true;
            }
        }

        return false;
    }

    @ExceptionHandler(MaxUploadSizeExceededException.class)
    public ModelAndView handleException(Exception ex, HttpServletRequest request) {
        Map<String, Object> model = new HashMap<String, Object>();
        model.put("result", "0");
        if (ex instanceof MaxUploadSizeExceededException) {
            model.put("fail", "文件不能大于 " + getFileKB(((MaxUploadSizeExceededException) ex).getMaxUploadSize()));
        } else {
            model.put("fail", "未知错误: " + ex.getMessage());
        }
        return new ModelAndView("upload_callback", model);

    }

    private String getFileKB(long byteFile) {
        if (byteFile == 0)
            return "0KB";
        long kb = 1024;
        return "" + byteFile / kb + "KB";
    }

    @RequestMapping("/submit/{act:[a-z-]+}")
    @ResponseBody
    public ResultObject submit(@PathVariable("act") String act, @RequestParam(value = "func", defaultValue = "") String func,
            BidProject proj, HttpSession sess) {

        User user = null;
        try {
            user = Permission.check(sess, UserRole.BUY, UserRole.CLIENT);
        } catch (Exception e) {
            return new ResultObject(ResultObject.FAIL, "未登录或无权限");
        }

        if ("publish".equals(act)) {
            proj.setProjStatus(2);
            proj.setNoticeStatus(2);
        } else {
            proj.setProjStatus(1);
            proj.setNoticeStatus(1);
        }
        
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(proj.getBidStartTime());
        calendar.set(Calendar.MINUTE, calendar.get(Calendar.MINUTE) - proj.getBidDuration());
        proj.setTrialEndTime(calendar.getTime());
        

        calendar.setTime(proj.getBidStartTime());
        calendar.set(Calendar.MINUTE, calendar.get(Calendar.MINUTE) + proj.getBidDuration());
        proj.setBidEndTime(calendar.getTime());
        
        calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND) + proj.getTimeoutInterval());
        proj.setTimeoutEndTime(calendar.getTime());

        if ("edit".equals(func)) {
            BidProject old = bidProjectService.queryProjectById(proj.getProjId());
            if (old == null || !old.getUserId().equals(user.getUserId()) || old.getProjStatus() != 1) {
                return new ResultObject(ResultObject.FAIL, "项目不存在");
            }
            
            bidProjectService.updateProject(proj);
        } else {

            proj.setUserId(user.getUserId());
            proj.setCompanyId(user.getCompanyId());

            bidProjectService.publishProject(proj);
        }
        
        //  如果是邀请竞价，竞价公告需要已短信的形式发给所有被邀请的供应商。
        //  竞价公告短信：”供应商，您好：XXXX（项目名称）竞价公告已发布，请在xxxxx（竞价开始时间）参与此次电子竞价！“
        if (proj.getNoticeStatus() == 2 && proj.getProjType() == 1) {
            List<String> codes = new ArrayList<String>();
            for (BidProjSupplier i : proj.getSuppliers()) {
                codes.add(i.getSupCode());
            }
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            List<SupInfo> supInfos = supInfoService.querySupInfosTelBySupCode(codes);
            String content = SmsContents.BID_PUBLISH.replace("{projName}", proj.getProjName()).replace("{bidStartTime}", df.format(proj.getBidStartTime()));

            List<String> mobiles = new ArrayList<String>();
            for (int i = 0; i < supInfos.size(); i++) {
                String tel = supInfos.get(i).getContactNum();
                if(!"".equals(tel) && tel != null){
                    mobiles.add(tel);
                }
                
            }
            try {
                ShortMessageUtils.sendSMS(mobiles.toArray(new String[]{}), content);
            } catch (RemoteException e) {
                logger.error("短信发送失败", e);
            }
            
        }


        return new ResultObject(ResultObject.OK, "");
    }

    @InitBinder
    protected void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(int.class, new IntegerEditor());
        binder.registerCustomEditor(Date.class, new DateEditor());
    }

    public class IntegerEditor extends PropertiesEditor {
        @Override
        public void setAsText(String text) throws IllegalArgumentException {
            if (text == null || text.equals("")) {
                text = "0";
            }
            setValue(Integer.parseInt(text));
        }

        @Override
        public String getAsText() {
            return getValue().toString();
        }
    }

    public class DateEditor extends PropertiesEditor {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm");

        @Override
        public void setAsText(String text) throws IllegalArgumentException {
            if (text == null || text.equals("")) {
                setValue(null);
                return;
            }
            try {
                setValue(df.parse(text));
            } catch (ParseException e) {
                setValue(null);
            }
        }

        @Override
        public String getAsText() {
            return df.format(getValue());
        }
    }
    

    @RequestMapping("/downfile")
    public void downfile(@RequestParam("path") String path, @RequestParam("name") String name, HttpServletRequest reqeust, HttpServletResponse response, HttpSession session) throws UnsupportedEncodingException {
        response.setCharacterEncoding("UTF-8");
        response.setContentType("multipart/form-data");
        if (path.contains("..")) {
            return ;
        }
        String fileName = reqeust.getSession().getServletContext().getRealPath("/") + path;
        response.setHeader("Content-Disposition", "attachment;fileName=" + java.net.URLEncoder.encode(name, "UTF-8"));
        try {
            File file = new File(fileName);
            InputStream inputStream = new FileInputStream(file);
            OutputStream os = response.getOutputStream();
            byte[] b = new byte[1024];
            int length;
            while ((length = inputStream.read(b)) > 0) {
                os.write(b, 0, length);
            }
            inputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
