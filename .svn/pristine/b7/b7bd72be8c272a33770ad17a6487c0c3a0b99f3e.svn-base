package com.avic.supervise.controllers;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.beans.ResultObject;
import com.avic.supervise.models.ImageInfo;
import com.avic.supervise.models.Invoice;
import com.avic.supervise.models.Order;
import com.avic.supervise.models.OrderSnapshot;
import com.avic.supervise.models.VatInfo;
import com.avic.supervise.services.InvoiceService;
import com.avic.supervise.services.OrderService;
import com.avic.supervise.services.SupService;
import com.avic.supervise.services.UserService;

@Controller
@RequestMapping("/invoice")
public class InvoiceController {
    protected static final Log logger = LogFactory.getLog(InvoiceController.class);

    static final int PAGE_SIZE = 10;
    
    @Autowired
    InvoiceService invoiceService;
    @Autowired
    SupService supService;
    
    @Autowired
    UserService userService;
    
    @RequestMapping("/list")
    public String list(HttpServletRequest req, Map<String, Object> map) {
        String orderId = req.getParameter("orderId");
        String companyId = req.getParameter("companyId");
        String invoiceStatus = req.getParameter("invoiceStatus");
        String timeStart = req.getParameter("timeStart");
        String timeEnd = req.getParameter("timeEnd");
        String page = req.getParameter("page");
        
        logger.info("发票管理-timeStart["+timeStart+"], timeEnd["+timeEnd+"], orderId["+orderId+"], companyId["+companyId+"], invoiceStatus["+invoiceStatus+"], page["+page+"]");
        
        
        if ("0".equals(invoiceStatus) || "1".equals(invoiceStatus)) {
            
        } else {
            invoiceStatus = "";
        }
        

        int pageNum = 1;

        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }
        
        int total = invoiceService.getInvoiceCount(timeStart, timeEnd, orderId, companyId, invoiceStatus);
        
        double i0 = 0, i1 = 0;
        
        if ("0".equals(invoiceStatus)) {
            i0 = invoiceService.getInvoiceStat(timeStart, timeEnd, orderId, companyId, "0");
            i1 = 0;
        } else if ("1".equals(invoiceStatus)) {
            i1 = invoiceService.getInvoiceStat(timeStart, timeEnd, orderId, companyId, "1");
            i0 = 0;
        } else {
            i0 = invoiceService.getInvoiceStat(timeStart, timeEnd, orderId, companyId, "0");
            i1 = invoiceService.getInvoiceStat(timeStart, timeEnd, orderId, companyId, "1");
        }

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (pageNum > pages) {
            pageNum = pages;
        }
        if (total > 0) {
            map.put("list", invoiceService.getInvoiceList(timeStart, timeEnd, orderId, companyId, invoiceStatus, pageNum, PAGE_SIZE));
        }

        if (companyId == null) {
            companyId = "";
        }
        if (orderId == null) {
            orderId = "";
        }
        if (timeStart == null) {
            timeStart = "";
        }
        if (timeEnd == null) {
            timeEnd = "";
        }

        map.put("i0", i0);
        map.put("i1", i1);
        map.put("timeStart", timeStart);
        map.put("timeEnd", timeEnd);
        map.put("orderId", orderId);
        map.put("companyId", companyId);
        map.put("invoiceStatus", invoiceStatus);
        map.put("companys", userService.getCompanyList());
        map.put("total", total);
        map.put("page", pageNum);
        map.put("pageAction", "supervise/invoice/list?orderId="+orderId+"&companyId="+companyId+"&timeStart="+timeStart+"&timeEnd="+timeEnd+"&invoiceStatus="+invoiceStatus+"&page=%PAGE%");
        map.put("pages", pages);
        
        return "invoice/list";
    }
    
    @RequestMapping("/add")
    public String add(HttpServletRequest req, Map<String, Object> map) {
        String orderId = req.getParameter("o");

        logger.info("发票管理-开票-orderId["+orderId+"]");
        
        //map.put("invoice", invoiceService.getInvoiceDetail(orderId));
        List<OrderSnapshot> list = invoiceService.getInvoiceSnapshot(Arrays.asList(orderId.split(",")));
        
        double total = 0;
        
        for (OrderSnapshot i : list) {
            total += (i.getBuyNum() * i.getGoodsPrice());
        }
        
        String oid = orderId.split(",")[0];
        
        
        Invoice invoice = invoiceService.getInvoiceDetail(oid);
        VatInfo vat = invoiceService.getDefaultVat(invoice.getUserId());
        
        if (orderId.contains(",") && !"1".equals(invoice.getInvoiceStatus())) {
            invoice.setExpressCode(null);
            invoice.setExpressName(null);
            invoice.setInvoiceCompany(null);
            invoice.setInvoiceReceiveDetail(null);
            if (vat != null) {
                invoice.setVatReceiveCity(vat.getVatReceiveCity() == null ? 0 : Integer.parseInt(vat.getVatReceiveCity()));
                invoice.setVatReceiveDetail(vat.getVatReceiveDetail());
                invoice.setVatReceiveDist(vat.getVatReceiveDist() == null ? 0 : Integer.parseInt(vat.getVatReceiveDist()));
                invoice.setVatReceiveName(vat.getVatReceiveName());
                invoice.setVatReceiveProv(vat.getVatReceiveProv() == null ? 0 : Integer.parseInt(vat.getVatReceiveProv()));
                invoice.setVatReceiveTel(vat.getVatReceiveTel());
            }
        } else {
            if (invoice.getInvoiceType() == 1) {
                invoice.setInvoiceReceiveDetail(invoice.getVatReceiveDetail());
                if (vat != null) {
                    invoice.setVatReceiveCity(vat.getVatReceiveCity() == null ? 0 : Integer.parseInt(vat.getVatReceiveCity()));
                    invoice.setVatReceiveDetail(vat.getVatReceiveDetail());
                    invoice.setVatReceiveDist(vat.getVatReceiveDist() == null ? 0 : Integer.parseInt(vat.getVatReceiveDist()));
                    invoice.setVatReceiveName(vat.getVatReceiveName());
                    invoice.setVatReceiveProv(vat.getVatReceiveProv() == null ? 0 : Integer.parseInt(vat.getVatReceiveProv()));
                    invoice.setVatReceiveTel(vat.getVatReceiveTel());
                }
            }
        }
        map.put("vatProv", supService.getSupArea(1, 0));
        
        if (vat != null && invoice.getVatReceiveProv() > 0) {
            map.put("vatCity", supService.getSupArea(1, Integer.parseInt(vat.getVatReceiveProv())));
        }
        if (vat != null && invoice.getVatReceiveCity() > 0) {
            map.put("vatDist", supService.getSupArea(1, Integer.parseInt(vat.getVatReceiveCity())));
        }

        map.put("vat", vat);
        map.put("invoice", invoice);
        map.put("orderId", orderId);
        map.put("goods", list);
        map.put("total", total);
        map.put("referer", req.getHeader("referer"));
        
        return "invoice/add";
    }
    
    @RequestMapping("/add/submit")
    @ResponseBody
    public ResultObject addSubmit(HttpServletRequest req) {
        String orderId = req.getParameter("orderId");
        String invoiceType = req.getParameter("invoiceType");
        String invoiceCompany = req.getParameter("invoiceCompany");
        String invoiceNum = req.getParameter("invoiceNum");
        String invoiceFlag = req.getParameter("invoiceFlag");
        String invoiceContent = req.getParameter("invoiceContent");
        String expressName = req.getParameter("expressName");
        String expressCode = req.getParameter("expressCode");
        String vatReceiveName = req.getParameter("vatReceiveName");
        String vatReceiveTel = req.getParameter("vatReceiveTel");
        String vatReceiveProv = req.getParameter("vatReceiveProv");
        String vatReceiveCity = req.getParameter("vatReceiveCity");
        String vatReceiveDist = req.getParameter("vatReceiveDist");
        String vatReceiveDetail = req.getParameter("vatReceiveDetail");
        
        Invoice invoice = new Invoice();
        invoice.setInvoiceType(Integer.parseInt(invoiceType));
        invoice.setOrderId(orderId);
        invoice.setInvoiceCompany(invoiceCompany);
        invoice.setInvoiceNum(invoiceNum);        
        invoice.setInvoiceFlag(Integer.parseInt(invoiceFlag));
        invoice.setInvoiceContent(invoiceContent);
        invoice.setExpressCode(expressCode);
        invoice.setExpressName(expressName);
        invoice.setVatReceiveName(vatReceiveName);
        invoice.setVatReceiveTel(vatReceiveTel);
        invoice.setVatReceiveProv(Integer.parseInt(vatReceiveProv));
        invoice.setVatReceiveCity(Integer.parseInt(vatReceiveCity));
        invoice.setVatReceiveDist(Integer.parseInt(vatReceiveDist));
        invoice.setVatReceiveDetail(vatReceiveDetail);
        
        try {
            invoiceService.updateOrderInvoice(invoice);
        } catch (Exception e) {
            return new ResultObject(ResultObject.FAIL, "开票失败");
        }
        
        return new ResultObject(ResultObject.OK, "");
    }
	/**
	 * 发票页面
	 * 
	 * @param map
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping("valueAddedList")
	public String valueAddedList(Map<String, Object> map,@ModelAttribute("VatInfo") VatInfo vatInfoParam,
			HttpSession httpSession) throws UnsupportedEncodingException {
		List<VatInfo> vatList = invoiceService.queryVatInfoList(vatInfoParam);
        map.put("vatList", vatList);//查询结果集
        //分页信息
		String page = String.valueOf(vatInfoParam.getPage());
		
        int total = invoiceService.queryVatInfoCount(vatInfoParam);

        int pages = (int) Math.ceil((double) total / vatInfoParam.getPageSize());
        
        map.put("page", page);
        map.put("vatInfoParam",vatInfoParam);
        map.put("total", total);
        map.put("pages", pages);
        map.put("pageAction","supervise/invoice/valueAddedList?"
        		+ "&companyName="+URLEncoder.encode((vatInfoParam.getCompanyName() == null ? "":vatInfoParam.getCompanyName()),"GBK")
        		+ "&registerPath="+URLEncoder.encode((vatInfoParam.getRegisterPath() == null ? "":vatInfoParam.getRegisterPath()),"GBK")
        		+ "&registerTel="+(vatInfoParam.getRegisterTel() == null ? "":vatInfoParam.getRegisterTel())
        		+ "&bankName="+URLEncoder.encode((vatInfoParam.getBankName() == null ? "":vatInfoParam.getBankName()),"GBK")
        		+ "&bankAccount="+URLEncoder.encode((vatInfoParam.getBankAccount() == null ? "":vatInfoParam.getBankAccount()),"GBK")
        		+ "&auditStatus="+URLEncoder.encode((vatInfoParam.getAuditStatus() == null ? "":vatInfoParam.getAuditStatus()),"GBK")
        		+ "&taxpayerCode="+URLEncoder.encode((vatInfoParam.getTaxpayerCode() == null ? "":vatInfoParam.getTaxpayerCode()),"GBK")
                + "&page=%PAGE%");
		return "invoice/supervise_vat";
	}
	/**
	 * 发票审核页面
	 * @return
	 */
	@RequestMapping("/valueAddedPage/{id}")
	public String valueAddedPage(Map<String, Object> map,
			@PathVariable("id") String id,
			HttpSession httpSession) {
		VatInfo vatInfoParam = new VatInfo();
		vatInfoParam.setId(id);
		List<VatInfo> vatList = invoiceService.queryVatInfoList(vatInfoParam);
		VatInfo vatInfo = vatList.get(0);
		ImageInfo imageInfo1 = new ImageInfo();
		imageInfo1.setId(id);
		imageInfo1.setBusinessType("3");
		List<ImageInfo> imgList1 = invoiceService.queryImageInfo(imageInfo1);
		ImageInfo imageInfo2 = new ImageInfo();
		imageInfo2.setId(id);
		imageInfo2.setBusinessType("4");
		List<ImageInfo> imgList2 = invoiceService.queryImageInfo(imageInfo2);
		ImageInfo imageInfo3 = new ImageInfo();
		imageInfo3.setId(id);
		imageInfo3.setBusinessType("5");
		List<ImageInfo> imgList3 = invoiceService.queryImageInfo(imageInfo3);
		vatInfo.setImgOne(imgList1);
		vatInfo.setImgTwo(imgList2);
		vatInfo.setImgThree(imgList3);
		map.put("vatInfo", vatInfo);
		return "invoice/supervise_vat_check";
	}
	/**
	 * 供应商商品审核确认
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/valueAddedConfirm")
	@ResponseBody
	public Object valueAddedConfirm(@RequestParam("id") String id,
			@RequestParam("auditStatus") String auditStatus,
			@RequestParam("auditContent") String auditContent,
			HttpSession httpSession) {
		VatInfo vatInfoParam = new VatInfo();
		vatInfoParam.setAuditStatus(auditStatus);
		vatInfoParam.setAuditContent(auditContent);
		vatInfoParam.setId(id);
		invoiceService.updateVatInfo(vatInfoParam);
		return "0";
	}
}
