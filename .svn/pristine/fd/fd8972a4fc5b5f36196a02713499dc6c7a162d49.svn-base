package com.avic.management.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.avic.common.constants.UserRole;
import com.avic.common.exceptions.NoPermissionException;
import com.avic.common.exceptions.UserNotLoginException;
import com.avic.common.utils.Permission;
import com.avic.management.models.Audit;
import com.avic.management.models.CodeList;
import com.avic.management.models.Exchange;
import com.avic.management.models.Invoice;
import com.avic.management.models.OrderSnapshot;
import com.avic.management.services.CodeListService;
import com.avic.management.services.CommonService;
import com.avic.management.services.ExchangeService;
import com.avic.management.services.InvoiceService;
import com.avic.passport.models.User;

@Controller
@RequestMapping("/exchange")
public class ExchangeController {
    protected static final Log logger = LogFactory.getLog(ExchangeController.class);
    
    @Autowired
    CommonService commonService;
    @Autowired
    ExchangeService exchangeService;
    @Autowired
    CodeListService codeListService;
    
    @RequestMapping("")
    public String index(@ModelAttribute("exchange") Exchange exchange,Map<String, Object> map,HttpSession httpSession) {
        logger.info("查询换货单列表");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
		CodeList codeList = new CodeList();
		codeList.setCodeListType("EXCHANGE_STATUS");
		List<CodeList> codes = new ArrayList<CodeList>();
		codes = codeListService.queryCodes(codeList);
		List<Exchange> exchanges = new ArrayList<Exchange>();
		exchange.setUserID(user.getUserId());
		exchanges = exchangeService.queryExchange(exchange);
		map.put("codes", codes);
        map.put("exchanges", exchanges);
        map.put("exchange", exchange);
        return "management_exchange";
    }
    
    
    @RequestMapping("check/{exchangeID}")
    public String exchangeCheck(@PathVariable("exchangeID")String exchangeID,Map<String, Object> map,HttpSession httpSession) {
        logger.info("查看换货单");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
		//查询换货单详细信息
		Exchange exchange = new Exchange();
		exchange.setExchangeID(exchangeID);
		exchange = exchangeService.queryExchangeByID(exchange);
		//商品详情
		List<OrderSnapshot> orderSnapshots = new ArrayList<OrderSnapshot>();
		OrderSnapshot orderSnapshot = new OrderSnapshot();
		orderSnapshot.setExchangeID(exchangeID);
		orderSnapshot.setOrderId(exchange.getOrderID());
		orderSnapshots = exchangeService.queryOrderSnapshotsByOrderID(exchange);
		exchange.setOrderSnapshots(orderSnapshots);
        map.put("exchange", exchange);
        return "management_exchange_check";
    }
    
    @RequestMapping("confirmation/{exchangeID}")
    @Transactional
    public String confirmationExchangeOrder(@RequestParam("exchangeID")String exchangeID,Map<String, Object> map,HttpSession httpSession) {
        logger.info("换货-确认收获");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
		//exchange_status 5采购商确认收获
		Exchange exchange = new Exchange();
		exchange.setExchangeID(exchangeID);
		exchange.setExchangeStatus("5");
		exchangeService.updateOrderExchangeStatus(exchange);
		//查看是否订单下还有未确认的换货单 有则不修改订单状态 没有修改
		int reCount = exchangeService.queryOrderExchangeReceiptCount(exchange);
		if(reCount<=0){
			//修改订单状态  order_status 12换货成功
			exchange.setOrderStatus(12);
			exchangeService.updateOrderStatusByExchangeID(exchange);
		}
        return "management_exchange";
    }
    @RequestMapping("send/{exchangeID}")
    @Transactional
    public String sendExchangeOrder(@PathVariable("exchangeID")String exchangeID,Map<String, Object> map,HttpSession httpSession) {
        logger.info("供应商换货发货");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
		//查询换货单详细信息
		Exchange exchange = new Exchange();
		exchange.setExchangeID(exchangeID);
		exchange = exchangeService.queryExchangeByID(exchange);
		//商品详情
		List<OrderSnapshot> orderSnapshots = new ArrayList<OrderSnapshot>();
		OrderSnapshot orderSnapshot = new OrderSnapshot();
		orderSnapshot.setExchangeID(exchangeID);
		orderSnapshot.setOrderId(exchange.getOrderID());
		orderSnapshots = exchangeService.queryOrderSnapshotsByOrderID(exchange);
		exchange.setOrderSnapshots(orderSnapshots);
        map.put("exchange", exchange);
        return "management_exchange_send";
    }
    
    @RequestMapping("sendOrderExchange")
    @Transactional
    public String sendOrderExchange(@ModelAttribute("exchange") Exchange exchange,Map<String, Object> map,HttpSession httpSession) {
        logger.info("换货单提交发货！");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
		//修改换货单状态
		exchange.setExchangeStatus("3");
		exchangeService.updateOrderExchangeStatus(exchange);
		//修改退货单快递信息
		exchangeService.updateOrderExchangeExpressInfo(exchange);
        return "redirect:/management/exchange";
    }
    @RequestMapping("del/{exchangeID}")
    @Transactional
    public String delOrderExchange(@PathVariable("exchangeID")String exchangeID,Map<String, Object> map,HttpSession httpSession) {
        logger.info("取消换货单");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
		//修改换货单状态
		Exchange exchange = new Exchange();
		exchange.setExchangeStatus("7");
		exchangeService.updateOrderExchangeStatus(exchange);
        return "redirect:/management/exchange";
    }
}
