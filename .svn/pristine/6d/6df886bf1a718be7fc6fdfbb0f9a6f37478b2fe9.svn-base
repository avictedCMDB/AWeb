package com.avic.market.controllers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.beans.ResultObject;
import com.avic.common.constants.SessionKeys;
import com.avic.common.constants.UserRole;
import com.avic.common.utils.Permission;
import com.avic.market.cpi.CpiService;
import com.avic.market.models.Address;
import com.avic.market.models.CartItem;
import com.avic.market.models.Goods;
import com.avic.market.models.Invoice;
import com.avic.market.models.Order;
import com.avic.market.models.OrderSnapshot;
import com.avic.market.models.Price;
import com.avic.market.services.AddressService;
import com.avic.market.services.CartService;
import com.avic.market.services.GoodsService;
import com.avic.market.services.InvoiceService;
import com.avic.market.services.OrderService;
import com.avic.passport.models.User;

@Controller
@RequestMapping("/order")
public class OrderController {
    protected static final Log logger = LogFactory.getLog(OrderController.class);
    
    @Autowired
    OrderService orderService;
    
    @Autowired
    CpiService cpiService;
    
    @Autowired
    AddressService addressService;
    
    @Autowired
    GoodsService goodsService;
    
    @Autowired
    CartService cartService;
    
    @Autowired
    InvoiceService invoiceService;
    
    @RequestMapping("/confirm")
    public String confirm(HttpServletRequest req, HttpSession session, Map<String, Object> map) {
        User user = Permission.check(session, UserRole.BUY);
        // 编号：supId_supGoodsId_num, ...
        String ids = req.getParameter("ids");
        String type = req.getParameter("type");
        logger.info("生成订单Controller-ids["+ids+"],type["+type+"]");

        if (StringUtils.isEmpty(ids)) {
            logger.info("生成订单Controller-参数无效-ids["+ids+"],type["+type+"]");
            map.put("error", "参数无效");
            return "forward:/market/cart/list";
        }
        
        if (StringUtils.isEmpty(type)) {
            type = "0";
        }
        
        int supId = 0;
        
        Map<String, Integer> skuNum = new HashMap<String, Integer>();
        
        List<String> errors = new ArrayList<String>();
        
        for (String i : ids.split(",")) {
            String[] seg = i.split("_");
            if (seg.length != 3 || !StringUtils.isNumeric(seg[0]) || !StringUtils.isNumeric(seg[2])) {
                logger.info("生成订单Controller-参数无效-ids["+ids+"]");
                return "forward:/market/cart/list";
            }
            
            if (supId == 0) {
                supId = Integer.parseInt(seg[0]);
            } else if (supId != Integer.parseInt(seg[0])) {
                map.put("error", "请选择同一个供应商的商品下单");
                return "forward:/market/cart/list";
            }
            
            skuNum.put(seg[1], Integer.parseInt(seg[2]));
        }
        
        List<String> skus = new ArrayList<String>(skuNum.keySet());
        
        List<CartItem> goods = cartService.getCartGoodsByIds(user.getUserId(), supId, skus);
        logger.info("生成订单-状态校验");

        Map<String, Integer> status = null;
        try {
            status = cpiService.getGoodsStatus(supId, skus);
        } catch (Exception e) {
            logger.info("生成订单-状态校验异常");
            map.put("error", "供应商连接异常，无法获得商品状态信息");
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }


        for (CartItem i : goods) {
            if (status.get(i.getSupGoodsId()) != 1) {
                errors.add("商品【"+i.getGoodsName()+"】已下架");
                goodsService.updateGoodsStatus(supId, i.getSupGoodsId(), 0);
            }
            
            // 加入数量
            i.setBuyNum(skuNum.get(i.getSupGoodsId()));
        }
        
        if (errors.size() > 0) {
            logger.info("生成订单-状态校验失败");
            map.put("error", "下单失败：\\n" + StringUtils.join(errors, "\\n"));
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }
        
        logger.info("生成订单-库存校验");
        

        Address addr = addressService.getDefaultAddress(user.getUserId(), supId);
        List<String> area = null;
        if (addr != null) {
            area = new ArrayList<String>();
            area.add(addr.getAreaLevelOne());
            area.add(addr.getAreaLevelTwo());
            area.add(addr.getAreaLevelThree());
            if (!StringUtils.isEmpty(addr.getAreaLevelFour())) {
                area.add(addr.getAreaLevelFour());
            }
        }
        Map<String, Integer> stocks = null;
        try {
            stocks = cpiService.getGoodsStock(supId, skus, area);
        } catch (Exception e) {
            logger.info("生成订单-库存校验失败");
            map.put("error", "供应商连接异常，无法获得库存信息");
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }
        
        for (CartItem i : goods) {
            if (stocks.get(i.getSupGoodsId()) == null || i.getBuyNum() > stocks.get(i.getSupGoodsId())) {
                errors.add("商品【"+i.getGoodsName()+"】库存不足");
            } else if (i.getCompare() < 1) {
                errors.add("商品【"+i.getGoodsName()+"】未对比");
            }
        }
        
        if (errors.size() > 0) {
            logger.info("生成订单-库存校验失败");
            map.put("error", "下单失败：\\n" + StringUtils.join(errors, "\\n"));
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }
        
        logger.info("生成订单-价格校验");

        Map<String, Price> prices = null;
        try {
            prices = cpiService.getGoodsPrice(supId, skus);
        } catch (Exception e) {
            logger.info("生成订单-价格校验异常");
            map.put("error", "供应商连接异常，无法获得商品价格信息");
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }


        for (CartItem i : goods) {
            Price p = prices.get(i.getSupGoodsId());
            if (p == null || p.getAgreePrice() != i.getAgreePrice()) {
                errors.add("商品【"+i.getGoodsName()+"】价格发生变化");
                p.setSupId(supId);
                p.setSupGoodsId(i.getSupGoodsId());
                goodsService.updateGoodsPrice(p);
            }
        }
        
        if (errors.size() > 0) {
            logger.info("生成订单-价格校验失败");
            map.put("error", "下单失败：\\n" + StringUtils.join(errors, "\\n"));
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }
        
        map.put("address", addressService.getUserAddress(user.getUserId(), supId));
        map.put("invoice", invoiceService.getUserInvoice(user.getUserId()));
        map.put("goods", goods);
        map.put("supId", supId);
        map.put("ids", ids);
        map.put("prov", addressService.getSupArea(supId, 0));
        
        return "order/order";
    }
    
    @RequestMapping("/area")
    @ResponseBody
    public ResultObject area(HttpServletRequest req) {
        // 上级区域
        String parent = req.getParameter("parent");
        // 供应商编号
        String supId = req.getParameter("supId");
        logger.info("获取区域Controller-parent["+parent+"]， supId["+supId+"]");

        if (!StringUtils.isNumeric(supId) || !StringUtils.isNumeric(parent)) {
            logger.info("获取区域Controller-参数无效-parent["+parent+"]， supId["+supId+"]");

            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        return new ResultObject(ResultObject.OK, addressService.getSupArea(Integer.parseInt(supId), Integer.parseInt(parent)));
        
    }
    
    @RequestMapping("/address")
    @ResponseBody
    public ResultObject address(HttpServletRequest req, HttpSession session) {
        User user = Permission.check(session, UserRole.BUY);
        // 省
        String prov = req.getParameter("prov");
        // 市
        String city = req.getParameter("city");
        // 县
        String dist = req.getParameter("dist");
        // 镇
        String town = req.getParameter("town");
        // 详细
        String detail = req.getParameter("detail");
        // 收货人
        String name = req.getParameter("name");
        // 邮编
        String zip = req.getParameter("zip");
        // 手机
        String phone = req.getParameter("phone");
        // 电话
        String tel = req.getParameter("tel");
        // 供应商编号
        String supId = req.getParameter("supId");

        logger.info("添加地址Controller-prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], detail["+detail+"], name["+name+"], zip["+zip+"], phone["+phone+"], tel["+tel+"], supId["+supId+"]");

        if (StringUtils.isEmpty(prov)||StringUtils.isEmpty(city)||StringUtils.isEmpty(dist)||StringUtils.isEmpty(detail)||StringUtils.isEmpty(name)) {

            logger.info("添加地址Controller-参数无效-prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], detail["+detail+"], name["+name+"], zip["+zip+"], phone["+phone+"], tel["+tel+"], supId["+supId+"]");

            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        Address address = new Address();
        address.setAddressDetail(detail);
        address.setAreaLevelFour(town);
        address.setAreaLevelOne(prov);
        address.setAreaLevelThree(dist);
        address.setAreaLevelTwo(city);
        address.setName(name);
        address.setPhone(phone);
        address.setSupId(supId);
        address.setTel(tel);
        address.setUserId(user.getUserId());
        address.setZipCode(zip);
        
        addressService.addAddress(address);
        
        return new ResultObject(ResultObject.OK, "添加成功");
    }
    
    @RequestMapping("/check")
    @ResponseBody
    public ResultObject check(HttpServletRequest req, HttpSession session) {
        User user = Permission.check(session, UserRole.BUY);
        
        // 供应商编号 
        String supId = req.getParameter("supId");
        // 商品:gid#num,...
        String goods = req.getParameter("goods");
        // 省
        String prov = req.getParameter("prov");
        // 市
        String city = req.getParameter("city");
        // 区
        String dist = req.getParameter("dist");
        // 镇
        String town = req.getParameter("town");
        
        logger.info("生成订单-库存校验-prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], goods["+goods+"], supId["+supId+"]");

        
        if (!StringUtils.isNumeric(supId) || StringUtils.isEmpty(goods) || !StringUtils.isNumeric(prov) || !StringUtils.isNumeric(city) || !StringUtils.isNumeric(dist)) {
            logger.info("生成订单-参数无效-库存校验-prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], goods["+goods+"], supId["+supId+"]");
            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        Map<String, Integer> map = new HashMap<String, Integer>();
        
        try {
            for (String i : goods.split(",")) {
                map.put(i.split("_")[1], Integer.parseInt(i.split("_")[2]));
            }
        } catch (Exception e) {
            logger.info("生成订单-参数无效-库存校验-prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], goods["+goods+"], supId["+supId+"]");
            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        List<String> area = new ArrayList<String>();
        area.add(prov);
        area.add(city);
        area.add(dist);
        area.add(town == null ? "" : town);
        
        Map<String, Integer> stocks = null;
        try {
            stocks = cpiService.getGoodsStock(Integer.parseInt(supId), new ArrayList<String>(map.keySet()), area);
        } catch (Exception e) {
            logger.info("生成订单-库存校验失败");
            return new ResultObject(ResultObject.FAIL, "供应商连接异常，无法获得库存信息");
        }
        
        for (Entry<String, Integer> i : map.entrySet()) {
            if (stocks.get(i.getKey()) == null || i.getValue() > stocks.get(i.getKey())) {
                return new ResultObject(ResultObject.FAIL, "配送到所选地址的商品库存不足，请选择其他地址");
            }
        }
        
        
        return new ResultObject(ResultObject.OK, "");
    }
    
    @RequestMapping("/invoice")
    @ResponseBody
    public ResultObject invoice(HttpServletRequest req, HttpSession session) {
        User user = Permission.check(session, UserRole.BUY);
        // 发票内容类型
        String flag = req.getParameter("flag");
        // 发票内容
        String content = req.getParameter("content");
        // 付款单位
        String company = req.getParameter("company");
        // 税务登记号
        String num = req.getParameter("num");

        logger.info("生成订单-添加发票-flag["+flag+"], content["+content+"], company["+company+"], num["+num+"]");

        if (!StringUtils.isNumeric(flag) || StringUtils.isEmpty(company)) {
            logger.info("生成订单-参数无效-添加发票-flag["+flag+"], content["+content+"], company["+company+"], num["+num+"]");
            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        Invoice invoice = new Invoice();
        invoice.setCompanyName(company);
        invoice.setInvoiceContent(content);
        invoice.setInvoiceFlag(flag);
        invoice.setInvoiceNum(num);
        invoice.setUserId(user.getUserId());
        

        invoiceService.addInvoice(invoice);
        return new ResultObject(ResultObject.OK, "添加成功");
        
    }
    
    @RequestMapping("/submit")
    public String submit(HttpServletRequest req, HttpSession session, Map<String, Object> map) {
        User user = Permission.check(session, UserRole.BUY);
        // 编号：supId_supGoodsId_num, ...
        String ids = req.getParameter("ids");
        // 配送方式
        String expressType = req.getParameter("express_type");
        // 省
        String addrProv = req.getParameter("addr_prov");
        // 市
        String addrCity = req.getParameter("addr_city");
        // 区
        String addrDist = req.getParameter("addr_dist");
        // 镇
        String addrTown = req.getParameter("addr_town");
        // 详细
        String addrDetail = req.getParameter("addr_detail");
        // 姓名
        String addrName = req.getParameter("addr_name");
        // 邮编
        String addrZip = req.getParameter("addr_zip");
        // 手机号
        String addrPhone = req.getParameter("addr_phone");
        // 电话
        String addrTel = req.getParameter("addr_tel");
        // 地址
        String addrAll = req.getParameter("addr_all");
        // 发票类型
        String invoiceType = req.getParameter("invoice_type");
        // 发票内容类型
        String invoiceFlag = req.getParameter("invoice_flag");
        // 发票内容明细
        String invoiceContent = req.getParameter("invoice_content");
        // 单位
        String invoiceCompany = req.getParameter("invoice_company");
        // 税号
        String invoiceNum = req.getParameter("invoice_num");
        // 决策理由
        String decideReason = req.getParameter("decide_reason");
        
        logger.info("生成订单-提交-ids["+ids+"], expressType["+expressType+"], addrProv["+addrProv+"], addrCity["+addrCity+"], addrDist["+addrDist+"], addrTown["+addrTown+"], addrDetail["+addrDetail+"],"
                + " addrName["+addrName+"], addrZip["+addrZip+"], addrPhone["+addrPhone+"], addrTel["+addrTel+"], addrAll["+addrAll+"], invoiceType["+invoiceType+"], invoiceFlag["+invoiceFlag+"],"
                        + " invoiceContent["+invoiceContent+"], invoiceCompany["+invoiceCompany+"], invoiceNum["+invoiceNum+"], decideReason["+decideReason+"]");

        if (StringUtils.isEmpty(addrTown)) {
            addrTown = "0";
        }

        if (StringUtils.isEmpty(ids) || !StringUtils.isNumeric(expressType) || !StringUtils.isNumeric(addrProv) || !StringUtils.isNumeric(addrCity) || !StringUtils.isNumeric(addrDist) || !StringUtils.isNumeric(addrTown) || StringUtils.isEmpty(addrDetail) || StringUtils.isEmpty(addrName) || !StringUtils.isNumeric(invoiceType) || !StringUtils.isNumeric(invoiceFlag) || StringUtils.isEmpty(invoiceCompany) || StringUtils.isEmpty(decideReason))  {
            map.put("success", false);
            map.put("msg", "参数无效");
            return "order/success";
        }
        

        int supId = 0;
        
        Map<String, Integer> skuNum = new HashMap<String, Integer>();
        
        List<String> errors = new ArrayList<String>();
        
        for (String i : ids.split(",")) {
            String[] seg = i.split("_");
            if (seg.length != 3 || !StringUtils.isNumeric(seg[0]) || !StringUtils.isNumeric(seg[2])) {
                logger.info("生成订单-提交-参数无效-ids["+ids+"]");
                map.put("success", false);
                map.put("msg", "参数无效");
                return "order/success";
            }
            
            if (supId == 0) {
                supId = Integer.parseInt(seg[0]);
            }
            
            skuNum.put(seg[1], Integer.parseInt(seg[2]));
        }
        
        
        List<Goods> goods = goodsService.getGoodsListByIds(supId, new ArrayList<String>(skuNum.keySet()));
        
        List<OrderSnapshot> list = new ArrayList<OrderSnapshot>();
        
        double total = 0;
        
        for (Goods i : goods) {
            OrderSnapshot s = new OrderSnapshot();
            s.setBuyNum(skuNum.get(i.getSupGoodsId()));
            s.setGoodsName(i.getGoodsName());
            s.setGoodsPrice(i.getAgreePrice());
            s.setImagePath(i.getImagePath());
            s.setSupGoodsId(i.getSupGoodsId());
            s.setSupId(i.getSupId());
            list.add(s);
            
            total += s.getBuyNum() * s.getGoodsPrice();
        }
        
        Order order = new Order();
        order.setAddrAll(addrAll);
        order.setAddrCity(Integer.parseInt(addrCity));
        order.setAddrDetail(addrDetail);
        order.setAddrDist(Integer.parseInt(addrDist));
        order.setAddrName(addrName);
        order.setAddrPhone(addrPhone);
        order.setAddrProv(Integer.parseInt(addrProv));
        order.setAddrTel(addrTel);
        order.setAddrTown(Integer.parseInt(addrTown));
        order.setAddrZip(addrZip);
        order.setDecideReason(decideReason);
        order.setExpressType(Integer.parseInt(expressType));
        order.setInvoiceCompany(invoiceCompany);
        order.setInvoiceContent(invoiceContent);
        order.setInvoiceFlag(Integer.parseInt(invoiceFlag));
        order.setInvoiceNum(invoiceNum);
        order.setInvoiceType(Integer.parseInt(invoiceType));
        order.setOrderAmount(total);
        order.setSupId(supId);
        order.setUserId(user.getUserId());
        
        // TODO:供应商预占
        
        try {
            orderService.addOrder(order, list);
            map.put("success", true);
            map.put("orderId", order.getOrderId());
        } catch (Exception e) {
            logger.error("生成订单-提交失败", e);
            map.put("success", false);
            map.put("msg", "订单生成失败");
            return "order/success";
        }
        
        try {
            logger.info("生成订单-提交-更新商品销量");
            for (OrderSnapshot i :list) {
                goodsService.updateGoodsSaleNum(i.getSupId(), i.getSupGoodsId(), i.getBuyNum());
            }
        } catch (Exception e) {
            logger.warn("生成订单-更新商品销量失败", e);
            // 不影响下单，忽略
        }

        
        try {
            logger.info("生成订单-提交-删除购物车商品");
            List<CartItem> items = new ArrayList<CartItem>();
            
            for (OrderSnapshot i :list) {
                CartItem c = new CartItem();
                c.setUserId(user.getUserId());
                c.setSupGoodsId(i.getSupGoodsId());
                c.setSupId(i.getSupId());
                items.add(c);
            }
            
            cartService.deleteCartGoods(items);
            

            int cartNum = cartService.countGoodsNum(user.getUserId());
            session.setAttribute(SessionKeys.CART_NUM, cartNum);
        } catch (Exception e) {
            logger.warn("生成订单--删除购物车商品失败", e);
            // 不影响下单，忽略
        }
        
        
        
        return "order/success";
    }
}
