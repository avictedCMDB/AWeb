package com.avic.supervise.controllers;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.beans.ResultObject;
import com.avic.supervise.models.ImageInfo;
import com.avic.supervise.models.Invoice;
import com.avic.supervise.models.VatInfo;
import com.avic.supervise.services.InvoiceService;
import com.avic.supervise.services.SupService;
import com.avic.supplier.models.SupplierCodeList;
import com.avic.supplier.models.SupplierExchange;

@Controller
@RequestMapping("/invoice")
public class InvoiceController {
    protected static final Log logger = LogFactory.getLog(InvoiceController.class);

    static final int PAGE_SIZE = 10;
    
    @Autowired
    InvoiceService invoiceService;
    @Autowired
    SupService supService;
    
    @RequestMapping("/list")
    public String list(HttpServletRequest req, Map<String, Object> map) {
        String orderId = req.getParameter("orderId");
        String supId = req.getParameter("supId");
        String invoiceStatus = req.getParameter("invoiceStatus");
        String page = req.getParameter("page");
        
        logger.info("发票管理-orderId["+orderId+"], supId["+supId+"], invoiceStatus["+invoiceStatus+"], page["+page+"]");
        
        int supIdInt = 0;
        
        if (StringUtils.isNumeric(supId)) {
            supIdInt = Integer.parseInt(supId);
        }
        
        if ("0".equals(invoiceStatus) || "1".equals(invoiceStatus)) {
            
        } else {
            invoiceStatus = "";
        }
        

        int pageNum = 1;

        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }
        
        int total = invoiceService.getInvoiceCount(orderId, supIdInt, invoiceStatus);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (pageNum > pages) {
            pageNum = pages;
        }
        if (total > 0) {
            map.put("list", invoiceService.getInvoiceList(orderId, supIdInt, invoiceStatus, pageNum, PAGE_SIZE));
        }
        
        if (orderId == null) {
            orderId = "";
        }
        
        map.put("orderId", orderId);
        map.put("supId", supId);
        map.put("invoiceStatus", invoiceStatus);
        map.put("sups", supService.getSupList());
        map.put("total", total);
        map.put("page", pageNum);
        map.put("pageAction", "supervise/invoice/list?orderId="+orderId+"&supId="+supIdInt+"&invoiceStatus="+invoiceStatus+"&page=%PAGE%");
        map.put("pages", pages);
        
        return "invoice/list";
    }
    
    @RequestMapping("/add")
    public String add(HttpServletRequest req, Map<String, Object> map) {
        String orderId = req.getParameter("o");

        logger.info("发票管理-开票-orderId["+orderId+"]");
        
        map.put("invoice", invoiceService.getInvoiceDetail(orderId));
        map.put("referer", req.getHeader("referer"));
        
        return "invoice/add";
    }
    
    @RequestMapping("/add/submit")
    @ResponseBody
    public ResultObject addSubmit(HttpServletRequest req) {
        String orderId = req.getParameter("orderId");
        String invoiceCompany = req.getParameter("invoiceCompany");
        String invoiceNum = req.getParameter("invoiceNum");
        String invoiceFlag = req.getParameter("invoiceFlag");
        String invoiceContent = req.getParameter("invoiceContent");
        String expressName = req.getParameter("expressName");
        String expressCode = req.getParameter("expressCode");
        
        Invoice invoice = new Invoice();
        invoice.setOrderId(orderId);
        invoice.setInvoiceCompany(invoiceCompany);
        invoice.setInvoiceNum(invoiceNum);
        int invoiceFlagInt = 1;
        if ("2".equals(invoiceFlag)) {
            invoiceFlagInt = 2;
        } else {
            invoiceContent = "";
        }
        invoice.setInvoiceFlag(invoiceFlagInt);
        invoice.setInvoiceContent(invoiceContent);
        invoice.setExpressCode(expressCode);
        invoice.setExpressName(expressName);
        
        try {
            invoiceService.updateOrderInvoice(invoice);
        } catch (Exception e) {
            return new ResultObject(ResultObject.FAIL, "开票失败");
        }
        
        return new ResultObject(ResultObject.OK, "");
    }
	/**
	 * 发票页面
	 * 
	 * @param map
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping("valueAddedList")
	public String valueAddedList(Map<String, Object> map,@ModelAttribute("VatInfo") VatInfo vatInfoParam,
			HttpSession httpSession) throws UnsupportedEncodingException {
		List<VatInfo> vatList = invoiceService.queryVatInfoList(vatInfoParam);
        map.put("vatList", vatList);//查询结果集
        //分页信息
		String page = String.valueOf(vatInfoParam.getPage());
		
        int total = invoiceService.queryVatInfoCount(vatInfoParam);

        int pages = (int) Math.ceil((double) total / vatInfoParam.getPageSize());
        
        map.put("page", page);
        map.put("vatInfoParam",vatInfoParam);
        map.put("total", total);
        map.put("pages", pages);
        map.put("pageAction","supervise/invoice/valueAddedList?"
        		+ "&companyName="+URLEncoder.encode((vatInfoParam.getCompanyName() == null ? "":vatInfoParam.getCompanyName()),"GBK")
        		+ "&registerPath="+URLEncoder.encode((vatInfoParam.getRegisterPath() == null ? "":vatInfoParam.getRegisterPath()),"GBK")
        		+ "&registerTel="+(vatInfoParam.getRegisterTel() == null ? "":vatInfoParam.getRegisterTel())
        		+ "&bankName="+URLEncoder.encode((vatInfoParam.getBankName() == null ? "":vatInfoParam.getBankName()),"GBK")
        		+ "&bankAccount="+URLEncoder.encode((vatInfoParam.getBankAccount() == null ? "":vatInfoParam.getBankAccount()),"GBK")
        		+ "&auditStatus="+URLEncoder.encode((vatInfoParam.getAuditStatus() == null ? "":vatInfoParam.getAuditStatus()),"GBK")
        		+ "&taxpayerCode="+URLEncoder.encode((vatInfoParam.getTaxpayerCode() == null ? "":vatInfoParam.getTaxpayerCode()),"GBK")
                + "&page=%PAGE%");
		return "invoice/supervise_vat";
	}
	/**
	 * 发票审核页面
	 * @return
	 */
	@RequestMapping("/valueAddedPage/{id}")
	public String valueAddedPage(Map<String, Object> map,
			@PathVariable("id") String id,
			HttpSession httpSession) {
		VatInfo vatInfoParam = new VatInfo();
		vatInfoParam.setId(id);
		List<VatInfo> vatList = invoiceService.queryVatInfoList(vatInfoParam);
		VatInfo vatInfo = vatList.get(0);
		ImageInfo imageInfo1 = new ImageInfo();
		imageInfo1.setId(id);
		imageInfo1.setBusinessType("3");
		List<ImageInfo> imgList1 = invoiceService.queryImageInfo(imageInfo1);
		ImageInfo imageInfo2 = new ImageInfo();
		imageInfo2.setId(id);
		imageInfo2.setBusinessType("4");
		List<ImageInfo> imgList2 = invoiceService.queryImageInfo(imageInfo2);
		ImageInfo imageInfo3 = new ImageInfo();
		imageInfo3.setId(id);
		imageInfo3.setBusinessType("5");
		List<ImageInfo> imgList3 = invoiceService.queryImageInfo(imageInfo3);
		vatInfo.setImgOne(imgList1);
		vatInfo.setImgTwo(imgList2);
		vatInfo.setImgThree(imgList3);
		map.put("vatInfo", vatInfo);
		return "invoice/supervise_vat_check";
	}
    
}
