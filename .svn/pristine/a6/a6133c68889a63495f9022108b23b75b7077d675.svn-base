package com.avic.management.controllers;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.beans.ResultObject;
import com.avic.common.constants.UserRole;
import com.avic.common.utils.ConfigHolder;
import com.avic.common.utils.Permission;
import com.avic.management.models.Order;
import com.avic.management.models.PayFlow;
import com.avic.management.models.SupInfo;
import com.avic.management.services.OrderService;
import com.avic.management.services.PayFlowService;
import com.avic.management.services.SupInfoService;
import com.avic.passport.models.User;
import com.chinapay.secss.SecssUtil;

/*
 * 财务
 */
@Controller
@RequestMapping("/finance")
public class FinanceController {
    protected static final Log logger = LogFactory.getLog(FinanceController.class);

    static final int PAGE_SIZE = 10;

    @Autowired
    PayFlowService payFlowService;

    @Autowired
    ConfigHolder configHolder;

    @RequestMapping("/index")
    public String index(HttpSession session, Map<String, Object> map) {
        User user = null;
        try {
            user = Permission.check(session, UserRole.PAY);
        } catch (Exception e) {
            return "redirect:/passport/login";
        }
        logger.info("财务管理-首页");
        map.put("cnt", orderService.getPaymentOrderCount(user.getCompanyId(), 0, "", 15, ""));
        return "finance/index";
    }

    @RequestMapping("/list")
    public String list(HttpServletRequest req, HttpSession session, Map<String, Object> map) {
        User user = null;
        try {
            user = Permission.check(session, UserRole.PAY);
        } catch (Exception e) {
            return "redirect:/passport/login";
        }

        String supId = req.getParameter("supId");
        String orderId = req.getParameter("orderId");
        String orderStatus = req.getParameter("orderStatus");
        String goodsName = req.getParameter("goodsName");
        String page = req.getParameter("page");

        if (!StringUtils.isNumeric(supId)) {
            supId = "0";
        }

        if (!"2".equals(orderStatus) && !"9".equals(orderStatus) && !"13".equals(orderStatus) && !"15".equals(orderStatus)) {

            orderStatus = "0";
        }

        int sid = Integer.parseInt(supId);
        int status = Integer.parseInt(orderStatus);

        int pageNum = 1;

        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }

        logger.info("财务管理-列表");

        List<SupInfo> si = getSupInfo();
        int total = orderService.getPaymentOrderCount(user.getCompanyId(), sid, orderId, status, goodsName);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (pageNum > pages) {
            pageNum = pages;
        }
        if (total > 0) {
            List<Order> orders = orderService.getPaymentOrderList(user.getCompanyId(), sid, orderId, status, goodsName, pageNum, PAGE_SIZE);
            for (Order i : orders) {
                for (SupInfo s : si) {
                    if (s.getSupID().equals(i.getSup_id())) {
                        i.setSup_name(s.getSupName());
                        break;
                    }
                }
            }
            map.put("list", orders);
        }

        map.put("sups", si);
        map.put("supId", supId);
        map.put("orderId", orderId);
        map.put("orderStatus", orderStatus);
        map.put("goodsName", goodsName);
        map.put("page", pageNum);
        map.put("total", total);
        map.put("pages", pages);

        if (goodsName == null) {
            goodsName = "";
        }

        try {
            map.put("pageAction",
                    "management/finance/list?supId=" + supId + "&orderId=" + orderId + "&goodsName=" + URLEncoder.encode(goodsName, "GBK")
                            + "&orderStatus=" + orderStatus + "&page=%PAGE%");
        } catch (UnsupportedEncodingException e) {
        }

        return "finance/list";
    }

    @RequestMapping("/pay")
    public String pay(HttpServletRequest req, HttpSession session, Map<String, Object> map) {
        User user = null;
        try {
            user = Permission.check(session, UserRole.PAY);
        } catch (Exception e) {
            return "redirect:/passport/login";
        }
        // 订单编号
        String o = req.getParameter("o");
        // 支付方式
        String t = req.getParameter("t");

        if (StringUtils.isEmpty(o) || StringUtils.isEmpty(t)) {
            map.put("error", "参数无效");
            return "finance/pay";
        }

        Order order = orderService.getOrderById(o);
        if (order == null) {
            map.put("error", "订单不存在");
            return "finance/pay";
        }

        if (!order.getOrder_status().equals("15")) {
            map.put("error", "订单不是待支付状态不能进行支付，请检查订单状态，如果已经支付请不要重复支付");
            return "finance/pay";
        }


        // 订单号20+12随机
        String payFlowNo = order.getOrder_id() + RandomStringUtils.random(12, "0123456789");

        Map<String, String> param = new HashMap<String, String>();

        param.put("Version", "20140728");
        param.put("MerId", configHolder.getConfig("chinapay.mer.id"));
        param.put("MerOrderNo", payFlowNo);
        String date = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
        param.put("TranDate", date.substring(0, 8));
        param.put("TranTime", date.substring(8));
        param.put("OrderAmt", String.valueOf((int) (Float.parseFloat(order.getOrder_amount()) * 100)));
        param.put("TranType", "0001".equals(t) ? "0001" : "0002");
        param.put("BusiType", "0001");
        param.put("MerPageUrl", configHolder.getConfig("chinapay.callback.page"));
        param.put("MerBgUrl", configHolder.getConfig("chinapay.callback.notify"));
        param.put("MerResv", order.getOrder_id());

        SecssUtil s = new SecssUtil();
        s.init();
        s.sign(param);
        param.put("Signature", s.getSign());

        PayFlow payFlow = new PayFlow();
        payFlow.setOrderId(order.getOrder_id());
        payFlow.setPayAmount(Double.parseDouble(order.getOrder_amount()));
        payFlow.setPayFlow(payFlowNo);
        payFlow.setPayStatus(0);
        payFlow.setPayType(1);
        payFlow.setProcStatus(0);
        payFlow.setRemark("发起订单支付");
        try {
            payFlow.setReqParam(new ObjectMapper().writeValueAsString(param));
        } catch (Exception e) {
        }

        payFlowService.insertPayFlow(payFlow);

        map.put("error", "");
        map.put("form", param);
        map.put("action", configHolder.getConfig("chinapay.url.pay"));

        return "finance/pay";
    }

    @RequestMapping("/callback/{type:.*}")
    public void callback(@PathVariable("type") String type, HttpServletRequest request, HttpServletResponse response) {
        try {
            request.setCharacterEncoding("utf-8");
        } catch (UnsupportedEncodingException e) {
        }
        response.setCharacterEncoding("utf-8");

        Enumeration<String> requestNames = request.getParameterNames();
        Map<String, String> resultMap = new HashMap<String, String>();
        while (requestNames.hasMoreElements()) {
            String name = requestNames.nextElement();
            String value = request.getParameter(name);
            if ("page".equals(type)) {
                resultMap.put(name, value);
            } else {
                try {
                    resultMap.put(name, URLDecoder.decode(value, "UTF-8"));
                } catch (UnsupportedEncodingException e) {
                }
            }
        }

        SecssUtil s = new SecssUtil();
        s.init();

        s.verify(resultMap);

        String error = null;

        if ("00".equals(s.getErrCode())) {
            if ("0000".equals(resultMap.get("OrderStatus"))) {
                String payFlowNo = resultMap.get("MerOrderNo");
                if (check(payFlowNo)) {
                    PayFlow payFlow = payFlowService.getPayFlowByNo(payFlowNo);

                    if (payFlow != null) {

                        if (payFlow.getPayStatus() != 1) {

                            payFlow.setPayStatus(1);
                            try {
                                payFlow.setResParam(new ObjectMapper().writeValueAsString(resultMap));
                            } catch (Exception e) {
                            }

                            Order order = orderService.getOrderById(payFlow.getOrderId());

                            if (!order.getOrder_status().equals("15")) {
                                payFlow.setProcStatus(2);
                                payFlow.setRemark("订单不是待支付状态[" + order.getOrder_status() + "]");
                                error = "订单不是待支付状态[" + order.getOrder_status() + "]";
                            } else {
                                orderService.updateOrderPayStatus(order.getOrder_id());
                                payFlow.setProcStatus(1);
                                payFlow.setRemark("订单支付成功");
                            }

                            payFlowService.updatePayFlow(payFlow);
                        }
                    } else {
                        error = "支付流水无效";
                    }

                    release(payFlowNo);
                } else {
                    PayFlow payFlow = payFlowService.getPayFlowByNo(payFlowNo);
                    if (payFlow.getProcStatus() == 2) {
                        error = payFlow.getRemark();
                    }
                }
            }

            try {
                if (type.equals("notify")) {
                    response.getWriter().write("success");
                } else {
                    if (error != null) {
                        response.getWriter().write("error");
                    } else {
                        response.getWriter().write("订单支付成功");
                    }
                }
            } catch (IOException e) {
            }
        } else {
            try {
                if (type.equals("notify")) {
                    response.getWriter().write("fail");
                } else {
                    response.getWriter().write("支付失败");
                }
            } catch (IOException e) {
            }
        }
    }
    
    @RequestMapping("/refund")
    @ResponseBody
    public ResultObject refund(HttpServletRequest req, HttpSession session) {

        User user = null;
        try {
            user = Permission.check(session, UserRole.PAY);
        } catch (Exception e) {
            return new ResultObject(ResultObject.FAIL, "未登录或无权限");
        }
        
        String o = req.getParameter("o");
        
        return new ResultObject(ResultObject.OK, "退款成功");
    }

    private List<String> locks = new ArrayList<String>();

    private synchronized boolean check(String payFlow) {
        if (locks.contains(payFlow)) {
            return false;
        }

        locks.add(payFlow);
        return true;
    }

    private synchronized void release(String payFlow) {
        locks.remove(payFlow);
    }

    @Autowired
    SupInfoService supInfoService;

    @Autowired
    OrderService orderService;

    static List<SupInfo> sups;

    private List<SupInfo> getSupInfo() {
        if (sups == null) {
            sups = supInfoService.querySupInfos();
        }

        return sups;
    }
}
