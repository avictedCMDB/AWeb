package com.avic.supervise.controllers;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.avic.common.exceptions.PageNotFoundException;
import com.avic.supervise.models.Goods;
import com.avic.supervise.models.Order;
import com.avic.supervise.services.CodeListService;
import com.avic.supervise.services.GoodsService;
import com.avic.supervise.services.OrderService;
import com.avic.supervise.services.SupService;

@Controller
@RequestMapping("/order")
public class OrderController {
    protected static final Log logger = LogFactory.getLog(OrderController.class);

    static final int PAGE_SIZE = 10;
    
    @Autowired
    SupService supService;
    @Autowired
    CodeListService codeListService;
    @Autowired
    OrderService orderService;
    @Autowired
    GoodsService goodsService;
    
    @RequestMapping("/list")
    public String list(HttpServletRequest req, Map<String, Object> map) {
        
        String supId = req.getParameter("supId");
        String orderId = req.getParameter("orderId");
        String companyName = req.getParameter("companyName");
        String goodsName = req.getParameter("goodsName");
        String time = req.getParameter("time");
        String orderStatus = req.getParameter("orderStatus");
        String page = req.getParameter("page");
        
        logger.info("订单管理");
        
        int supIdInt = 0;
        if (StringUtils.isNumeric(supId)) {
            supIdInt = Integer.parseInt(supId);
        }
        int timeInt = 0;
        if ("1".equals(time) || "3".equals(time) || "12".equals(time)) {
            timeInt = Integer.parseInt(time);
        }
        
        int orderStatusInt = -1;

        if (StringUtils.isNumeric(orderStatus)) {
            orderStatusInt = Integer.parseInt(orderStatus);
        }

        int pageNum = 1;

        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }
        
        int total = orderService.getManageOrderCount(supIdInt, orderId, goodsName, companyName, timeInt, orderStatusInt);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (pageNum > pages) {
            pageNum = pages;
        }
        if (total > 0) {
            List<Order> orders = orderService.getManageOrderList(supIdInt, orderId, goodsName, companyName, timeInt, orderStatusInt, pageNum, PAGE_SIZE);
            map.put("list", orders);
        }
        map.put("supId", supIdInt);
        map.put("orderId", orderId);
        map.put("companyName", companyName);
        map.put("goodsName", goodsName);
        map.put("time", timeInt);
        map.put("orderStatus", orderStatusInt);
        map.put("page", pageNum);
        map.put("total", total);
        map.put("pages", pages);

        if (goodsName == null) {
            goodsName = "";
        }
        if (companyName == null) {
            companyName = "";
        }
        if (orderId == null) {
            orderId = "";
        }

        try {
            map.put("pageAction",
                    "supervise/order/list?supId=" + supIdInt + "&orderId=" + orderId + "&goodsName=" + URLEncoder.encode(goodsName, "GBK")
                            + "&orderStatus=" + orderStatusInt + "&time="+timeInt+"&companyName="+URLEncoder.encode(companyName, "GBK")+"&page=%PAGE%");
        } catch (UnsupportedEncodingException e) {
        }
        map.put("sups", supService.getSupList());
        map.put("codes", codeListService.getCodeList("ORDER_STATUS"));
        return "order/list";
    }
    

    @RequestMapping("/detail")
    public String detail(HttpServletRequest req, Map<String, Object> map) {
        // 订单编号
        String o = req.getParameter("o");

        logger.info("订单详情-o["+o+"]");
        
        Order order = orderService.getOrderDetail(o);
        
        
        map.put("order", order);
        
        
        return "order/detail";
    }

    @RequestMapping("/goods")
    public String goods(HttpServletRequest req, Map<String, Object> map) {
     // 供应商编号
        String sid = req.getParameter("sid");
        // 商品编号
        String gid = req.getParameter("gid");

        if (!StringUtils.isNumeric(sid) || StringUtils.isEmpty(gid)) {
            throw new PageNotFoundException();
        }

        logger.info("商品详情Controller-sid[" + sid + "], gid[" + gid + "]");

        Goods goods = goodsService.getGoodsDetail(Integer.parseInt(sid), gid);
        if (goods == null) {
            throw new PageNotFoundException();
        }

        map.put("goods", goods);
        map.put("supName", supService.getSupName(goods.getSupId()));

        return "order/goods";
    }
    @RequestMapping("/goods/trade")
    public String goodsTradeRecord(HttpServletRequest req, Map<String, Object> map) {
        // 供应商编号
        String sid = req.getParameter("sid");
        // 商品编号
        String gid = req.getParameter("gid");
        // 页码
        String page = req.getParameter("page");
        

        logger.info("商品交易记录Controller-sid["+sid+"], gid["+gid+"], page[" + page + "]");

        if (StringUtils.isEmpty(gid) || !StringUtils.isNumeric(sid)) {
            logger.info("商品交易记录Controller-参数无效-sid["+sid+"], gid["+gid+"], page[" + page + "]");
            return "goods/trade";
        }

        int pageNum = 1;

        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }
        
        int total = goodsService.getTradeRecordCount(Integer.parseInt(sid), gid);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (pageNum > pages) {
            pageNum = pages;
        }
        if (total > 0) {
            map.put("list", goodsService.getTradeRecordList(Integer.parseInt(sid), gid, pageNum, PAGE_SIZE));
        }
        
        map.put("total", total);
        map.put("page", pageNum);
        map.put("pageAction", "supervise/order/goods/trade?sid="+sid+"&gid="+gid+"&page=%PAGE%");
        map.put("pages", pages);
        return "order/trade";
    }
}
