package com.avic.market.services.impl;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.avic.common.exceptions.ServiceException;
import com.avic.market.mappers.CategoryMapper;
import com.avic.market.mappers.GoodsMapper;
import com.avic.market.models.BrandAd;
import com.avic.market.models.Goods;
import com.avic.market.models.Price;
import com.avic.market.models.Supplier;
import com.avic.market.models.TradeRecord;
import com.avic.market.services.GoodsService;
import com.avic.market.utils.DataUtil;

@Service
public class GoodsServiceImpl implements GoodsService {
    protected static final Log logger = LogFactory.getLog(GoodsServiceImpl.class);

    @Autowired
    GoodsMapper goodsMapper;

    @Autowired
    CategoryMapper categoryMapper;

    @Override
    public List<Goods> searchGoods(int cat, String brand, int sup, String kw, int priceStart, int priceEnd, int order, int page, int size)
            throws ServiceException {
        logger.info("商品查询Service--cat[" + cat + "], brand[" + brand + "], kw[" + kw + "], price[" + priceStart + "," + priceEnd
                + "], order[" + order + "], page[" + page + "], size[" + size + "]");

        int[] cats = DataUtil.generateCategoryRange(cat);

        if (page < 1) {
            page = 1;
        }

        int start = (page - 1) * size + 1;
        int end = start + size - 1;

        return goodsMapper.queryGoodsList(cats[0], cats[1], brand, sup, kw, priceStart, priceEnd, order, start, end);
    }

    @Override
    public List<Goods> searchProfGoods(int sup, int priceStart, int priceEnd, String brand, String name, String desc, String model, String stuff,
            String cat1, String cat2, String cat3, String comp, int order, int page, int size) throws ServiceException {

        if (page < 1) {
            page = 1;
        }

        int start = (page - 1) * size + 1;
        int end = start + size - 1;
        
        if (StringUtils.isNotEmpty(cat3)) {
            cat1 = null;
            cat2 = null;
        } else if (StringUtils.isNotEmpty(cat2)) {
            cat1 = null;
        }
        
        return goodsMapper.queryProfGoodsList(sup, name, priceStart, priceEnd, brand, model, desc, stuff, cat1, cat2, cat3, comp, order, start, end);
    }
    
    @Override
    public int getGoodsCount(int cat, String brand, int sup, String kw, int priceStart, int priceEnd) throws ServiceException {
        logger.info("商品数量Service--cat[" + cat + "], brand[" + brand + "], kw[" + kw + "], price[" + priceStart + "," + priceEnd + "]");

        int[] cats = DataUtil.generateCategoryRange(cat);

        return goodsMapper.queryGoodsCount(cats[0], cats[1], brand, sup, kw, priceStart, priceEnd);
    }
    
    @Override
    public int getProfGoodsCount(int sup, int priceStart, int priceEnd, String brand, String name, String desc, String model, String stuff,
            String cat1, String cat2, String cat3,String comp) throws ServiceException {
        
        if (StringUtils.isNotEmpty(cat3)) {
            cat1 = null;
            cat2 = null;
        } else if (StringUtils.isNotEmpty(cat2)) {
            cat1 = null;
        }
        
        return goodsMapper.queryProfGoodsCount(sup, name, priceStart, priceEnd, brand, model, desc, stuff, cat1, cat2, cat3,comp);
    }

    @Override
    public List<String> getGoodsBrand(int supId, int cat, String kw) throws ServiceException {
        logger.info("获取商品品牌Service--supId[" + supId + "], cat[" + cat + "], kw[" + kw + "]");

        int[] cats = DataUtil.generateCategoryRange(cat);

        return goodsMapper.queryGoodsBrand(supId, cats[0], cats[1], kw);
    }
    
    @Override
    public List<String> getProfBrand(String cat1, String cat2, String cat3, int supId, String name, String model, String desc)
            throws ServiceException {
        
        if (StringUtils.isNotEmpty(cat3)) {
            cat1 = null;
            cat2 = null;
        } else if (StringUtils.isNotEmpty(cat2)) {
            cat1 = null;
        }
        return goodsMapper.queryProfBrand(cat1, cat2, cat3, supId, name, desc, model);
    }

    @Override
    public Goods getGoodsDetail(int supId, String supGoodsId) throws ServiceException {
        logger.info("获取商品详情Service--supId[" + supId + "], supGoodsId[" + supGoodsId + "]");
        Goods goods = goodsMapper.queryGoodsById(supId, supGoodsId);
        if (goods != null) {
            goods.setImages(goodsMapper.queryGoodsImage(supId, supGoodsId));
        }
        return goods;
    }

    @Override
    public Goods getGoodsSimple(int supId, String supGoodsId) throws ServiceException {
        logger.info("获取商品简要信息Service--supId[" + supId + "], supGoodsId[" + supGoodsId + "]");
        return goodsMapper.queryGoodsById(supId, supGoodsId);
    }

    @Override
    public void updateGoodsPrice(Price price) throws ServiceException {
        logger.info("更新商品价格Service");
        try {
            goodsMapper.updateGoodsPrice(price);
        } catch (Exception e) {
            logger.error("更新商品价格失败", e);
            throw new ServiceException(e);
        }
    }

    @Override
    public void updateGoodsStatus(int supId, String supGoodsId, int status) throws ServiceException {
        logger.info("更新商品状态Service");
        try {
            goodsMapper.updateGoodsStatus(supId, supGoodsId, status);
        } catch (Exception e) {
            logger.error("更新商品状态失败", e);
            throw new ServiceException(e);
        }
    }

    @Override
    public List<Goods> getGoodsListByIds(int supId, List<String> ids) throws ServiceException {
        logger.info("批量查询商品基本信息");
        return goodsMapper.queryGoodsByIds(supId, ids);
    }

    @Transactional
    @Override
    public void updateGoodsSaleNum(int supId, String supGoodsId, int num) throws ServiceException {
        logger.info("更新商品销量Service-supId[" + supId + "], supGoodsId[" + supGoodsId + "]");

        try {
            int count = goodsMapper.querySaleNumCount(supId, supGoodsId);
            if (count > 0) {
                goodsMapper.updateGoodsSaleNum(supId, supGoodsId, num);
            } else {
                goodsMapper.insertGoodsSaleNum(supId, supGoodsId, num);
            }
        } catch (Exception e) {
            logger.error("更新商品销量失败", e);
            throw new ServiceException(e);
        }
    }

    @Override
    public int getTradeRecordCount(int supId, String supGoodsId) throws ServiceException {
        logger.info("商品交易记录数量Service--supId[" + supId + "], supGoodsId[" + supGoodsId + "]");

        return goodsMapper.queryTradeRecordCount(supId, supGoodsId);
    }

    @Override
    public List<TradeRecord> getTradeRecordList(int supId, String supGoodsId, int page, int size) throws ServiceException {
        logger.info("商品查询Service--supId[" + supId + "], supGoodsId[" + supGoodsId + "], page[" + page + "], size[" + size + "]");

        if (page < 1) {
            page = 1;
        }

        int start = (page - 1) * size + 1;
        int end = start + size - 1;

        return goodsMapper.queryTradeRecordList(supId, supGoodsId, start, end);
    }

    @Override
    public List<Goods> getHotGoods(int cat, int size) throws ServiceException {
        logger.info("热门商品查询Service--cat[" + cat + "], size[" + size + "]");

        int[] cats = DataUtil.generateCategoryRange(cat);

        return goodsMapper.queryHotGoods(cats[0], cats[1], size);
    }

    @Override
    public List<Goods> getProfHotGoods(String cat, int size,String comp) throws ServiceException {
        return goodsMapper.queryProfHotGoods(cat, size,comp);
    }
    
    @Override
    public List<BrandAd> getBrandAd() throws ServiceException {
        return goodsMapper.queryBrandAd();
    }
    
    @Override
    public List<Supplier> getProfSup(String cat1, String cat2, String cat3, int supId, String name, String model, String brand,
            String desc, String comp) throws ServiceException {
        
        if (StringUtils.isNotEmpty(cat3)) {
            cat1 = null;
            cat2 = null;
        } else if (StringUtils.isNotEmpty(cat2)) {
            cat1 = null;
        }
        return goodsMapper.queryProfSup(cat1, cat2, cat3, supId, name, desc, model, brand, comp);
    }
    
    @Override
    public double getEnquiryPrice(String userId, String supId, String goodsId) {
        Double d = goodsMapper.queryEnquiryPrice(userId, supId, goodsId);
        if (d == null) {
            return 0;
        }
        
        return d.doubleValue();
    }
    
    @Override
    public List<Supplier> getAllProfSup(String comp) {
        return goodsMapper.queryAllProfSup(comp);
    }
    
    @Override
    public List<Goods> getRandomGoods(int num) {
        return goodsMapper.queryRandomGoods(num);
    }
}
