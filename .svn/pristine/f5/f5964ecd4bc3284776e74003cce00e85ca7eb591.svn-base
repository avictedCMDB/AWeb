package com.avic.management.controllers;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.constants.UserRole;
import com.avic.common.exceptions.PageNotFoundException;
import com.avic.common.utils.Permission;
import com.avic.management.models.OffStandardRequire;
import com.avic.management.models.SpecialGoodsBean;
import com.avic.management.models.SupGoods;
import com.avic.management.models.SupInfo;
import com.avic.management.services.OffStandardRequireService;
import com.avic.management.services.SpecialGoodsService;
import com.avic.management.services.SupInfoService;
import com.avic.passport.models.User;

@Controller
@RequestMapping("/specialGoods")
@Transactional
public class SpecialGoodsController {
    protected static final Log logger = LogFactory.getLog(SpecialGoodsController.class);
    static final int PAGE_SIZE = 10; //每页显示多少条
    @Autowired
    SpecialGoodsService specialGoodsService;
    @Autowired
    SupInfoService supInfoService;
    @Autowired
    OffStandardRequireService offStandardRequireService;
    
    @RequestMapping("")
    public String index(HttpSession httpSession) {
        logger.info("非标商品管理");
        User user = null;
        try {
            user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
        } catch (Exception e) {
            return "redirect:/passport/login";
        }
        return "profession_special_goods";
    }
    
    @RequestMapping("/supSelect")
    public String supSelectDoInit(HttpServletRequest request) {
        logger.info("非标商品管理-选择供应商跳转");
        String sup_type = request.getParameter("o");//1:合作供应商;2:平台其他供应商; 
        request.setAttribute("sup_type",sup_type);
        return "management_sup_select";
    }
    
    @RequestMapping("/supSelectData")
    @ResponseBody
    public Object supSelectDoInitData(HttpServletRequest request,HttpSession httpSession,
    		@RequestParam("sup_name")String sup_name) {
    	logger.info("非标商品管理-选择供应商获取列表");
    	
    	User user = null;
        try {
            user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
        } catch (Exception e) {
            return "redirect:/passport/login";
        }
        
        String sup_type = request.getParameter("o");//1:合作供应商;2:平台其他供应商;
    	
    	SpecialGoodsBean sgBean = new SpecialGoodsBean();
        sgBean.setSup_type(sup_type);
        sgBean.setCompany_id(user.getCompanyId());
        sgBean.setSup_name(sup_name);
    	
//      获取供应商列表
    	List<SpecialGoodsBean> supList = specialGoodsService.supSelectDoInitData(sgBean);
    	if (supList == null) {
    		throw new PageNotFoundException();
    	}
    	
    	return supList;
    }
    
    @RequestMapping("/offStandardRequirePage")
    public String queryOffStandardRequire(HttpServletRequest req,@ModelAttribute("offStandardRequire")OffStandardRequire offStandardRequire,Map<String, Object> map,HttpSession httpSession) {
        logger.info("非标商品列表");
        User user = null;
        try {
            user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
        } catch (Exception e) {
            return "redirect:/passport/login";
        }
        
        String page = req.getParameter("page");
		
		int pageNum = 1;
		 
        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }
        //查询供应商列表
        List<SupInfo> supInfos = new ArrayList<SupInfo>();
        supInfos = supInfoService.querySupInfos();
        offStandardRequire.setUserID(user.getUserId());
        //查询数量
        int total = offStandardRequireService.queryOffStandardRequiresCount(offStandardRequire);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);
        
        if (pageNum > pages) {
            pageNum = pages;
        }
        offStandardRequire.setPage(pageNum);
        offStandardRequire.setPageSize(PAGE_SIZE);
        List<OffStandardRequire> offStandardRequires = new ArrayList<OffStandardRequire>();
        offStandardRequires = offStandardRequireService.queryOffStandardRequires(offStandardRequire);
        for (OffStandardRequire osr : offStandardRequires) {
        	//查询商品列表
			String[] goodIDS = osr.getGoodsID().split(",");
			OffStandardRequire o = new OffStandardRequire();
			o.setGoodsIDS(Arrays.asList(goodIDS));
			List<SupGoods> supGoods = new ArrayList<SupGoods>();
			supGoods = offStandardRequireService.queryGoodsByGoodsIDS(o);
			osr.setSupGoods(supGoods);
			//查询供应商列表
			String[] supIDS = osr.getSupID().split(",");
			o.setSupIDS(Arrays.asList(supIDS));
			List<SupInfo> supInfoList = new ArrayList<SupInfo>();
			supInfoList = offStandardRequireService.querySupInfosBySupIDS(o);
			osr.setSupInfos(supInfoList);
		}
        map.put("supInfos", supInfos);
        map.put("offStandardRequire", offStandardRequire);
        map.put("offStandardRequires", offStandardRequires);
        map.put("page", pageNum);
        map.put("total", total);
        map.put("pages", pages);
        try {
			map.put("pageAction","management/specialGoods/OffStandardRequirePage?startTime=" + URLEncoder.encode(offStandardRequire.getGoodsDescNew()==null?"":offStandardRequire.getGoodsDescNew(), "GBK") 
								+ "&endTime=" + URLEncoder.encode(offStandardRequire.getSupID()==null?"":offStandardRequire.getSupID(), "GBK")
			                    + "&searchOrderId=" + URLEncoder.encode(offStandardRequire.getStatus()==null?"":offStandardRequire.getStatus(), "GBK")+ "&page=%PAGE%");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
        return "management_special";
    }
}