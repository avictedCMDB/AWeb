package com.avic.market.controllers;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.beans.ResultObject;
import com.avic.common.constants.SessionKeys;
import com.avic.common.constants.UserRole;
import com.avic.common.exceptions.NoPermissionException;
import com.avic.common.exceptions.PageNotFoundException;
import com.avic.common.exceptions.UserNotLoginException;
import com.avic.common.utils.Permission;
import com.avic.market.models.CompareItem;
import com.avic.market.models.EnquiryGoods;
import com.avic.market.models.Goods;
import com.avic.market.models.MarketCategory;
import com.avic.market.models.Supplier;
import com.avic.market.services.CategoryService;
import com.avic.market.services.EnquiryGoodsService;
import com.avic.market.services.GoodsService;
import com.avic.market.services.SupplierService;
import com.avic.market.utils.DataCache;
import com.avic.passport.models.User;
import com.avic.supervise.models.SupplierRecommend;

@Controller
@RequestMapping("/goods")
public class GoodsController {
    protected static final Log logger = LogFactory.getLog(GoodsController.class);

    private static final int PAGE_SIZE = 20;

    @Autowired
    GoodsService goodsService;
    @Autowired
    CategoryService categoryService;
    @Autowired
    SupplierService supplierService;
    @Autowired
    EnquiryGoodsService enquiryGoodsService;
    
    @Autowired
    DataCache dataCache;

    @RequestMapping("/search")
    public String search(HttpServletRequest req, Map<String, Object> map) {
        // 关键字
        String q = req.getParameter("q");
        // 分类
        String cat = req.getParameter("cat");
        // 品牌
        String brand = req.getParameter("brand");
        // 供应商
        String sup = req.getParameter("sup");
        // 价格
        String price = req.getParameter("price");
        // 页码
        String page = req.getParameter("p");
        // 排序
        String o = req.getParameter("o");
        // 大小图
        String view = req.getParameter("view");

        logger.info("商品搜索Controller-q[" + q + "], cat[" + cat + "], brand[" + brand + "], sup[" + sup + "], price[" + price + "], p["
                + page + "], o[" + o + "]");

        int catId = 0, supId = 0;

        if (StringUtils.isNumeric(cat)) {
            catId = Integer.parseInt(cat);
        }
        if (StringUtils.isNumeric(sup)) {
            supId = Integer.parseInt(sup);
        }

        int pageNum = 1;

        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }

        if (brand == null) {
            brand = "";
        }

        if (q == null) {
            q = "";
        }

        int order = 0;

        if (StringUtils.isNumeric(o)) {
            order = Integer.parseInt(o);
        }

        int priceStart = 0, priceEnd = 0;

        if (!StringUtils.isEmpty(price) && price.contains(",")) {
            String[] sep = price.split(",", 2);
            if (StringUtils.isNumeric(sep[0])) {
                priceStart = Integer.parseInt(sep[0]);
            }

            if (StringUtils.isNumeric(sep[1])) {
                priceEnd = Integer.parseInt(sep[1]);
            }
        }

        int total = goodsService.getGoodsCount(catId, brand, supId, q.toUpperCase().replaceAll(" ", ""), priceStart, priceEnd);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (pageNum > pages) {
            pageNum = pages;
        }
        if (total > 0) {
            map.put("list", goodsService.searchGoods(catId, brand, supId, q.toUpperCase().replaceAll(" ", ""), priceStart, priceEnd, order, pageNum, PAGE_SIZE));
            if (catId > 0) {
                map.put("hot", goodsService.getHotGoods(catId, 3));
            }
        }

        if (!"list".equals(view)) {
            view = "pic";
        }

        map.put("searchBrand", brand);
        map.put("cat", catId);
        int cat1 = 0, cat2 = 0, cat3 = 0;
        if (catId < 100) {
            cat1 = catId;
        } else if (catId < 10000) {
            cat1 = catId / 100;
            cat2 = catId;
        } else {
            cat1 = catId / 10000;
            cat2 = catId / 100;
            cat3 = catId;
        }
        map.put("cat1", cat1);
        map.put("cat2", cat2);
        map.put("cat3", cat3);
        map.put("sup", supId);
        map.put("brandList", goodsService.getGoodsBrand(supId, catId, q.toUpperCase()));
        map.put("supList", dataCache.getSupplierList());
        map.put("price", priceStart + "," + priceEnd);
        map.put("total", total);
        map.put("order", order);
        map.put("view", view);
        map.put("page", pageNum);
        try {
            map.put("pageAction", "market/goods/search?cat=" + catId + "&brand=" + URLEncoder.encode(brand, "GBK") + "&sup=" + supId
                    + "&q=" + URLEncoder.encode(q, "GBK") + "&price=" + priceStart + "," + priceEnd + "&o=" + order + "&view=" + view
                    + "&p=%PAGE%");
        } catch (UnsupportedEncodingException e) {
        }

        map.put("pages", pages);
        map.put("searchKeyword", q);

        return "goods/list";
    }

    @RequestMapping("/prof/index")
    public String profIndex(HttpServletRequest req, Map<String, Object> map) {
        
        List<MarketCategory> cats = categoryService.getMarketCatTree();
        /*
        List<MarketCategory> p1 = new ArrayList<MarketCategory>();
        List<MarketCategory> p2 = new ArrayList<MarketCategory>();
        
        for (MarketCategory i : cats) {
            if (i.getMarketCatId().equals("P1")) {
                p1 = i.getSubs();
            } else if (i.getMarketCatId().equals("P2")) {
                p2 = i.getSubs();
            }
        }
        
        map.put("p1", p1);
        map.put("p2", p2);
        */
        map.put("cats", cats);
        map.put("newSup", supplierService.getNewTraSup());
        map.put("recSup", supplierService.getRecommandTraSup());
        map.put("brands", goodsService.getBrandAd());
        
        return "goods/prof_index";
    }

    @RequestMapping("/prof")
    public String prof(HttpServletRequest req, HttpSession session, Map<String, Object> map) {
        // 关键字
        String q = req.getParameter("q");
        // 描述
        String desc = req.getParameter("desc");
        // 供应商
        String sup = req.getParameter("sup");
        // 分类
        String cat1 = req.getParameter("cat1");
        // 分类
        String cat2 = req.getParameter("cat2");
        // 分类
        String cat3 = req.getParameter("cat3");
        // 价格
        String price1 = req.getParameter("price1");
        String price2 = req.getParameter("price2");
        // 品牌
        String brand = req.getParameter("brand");
        // 规格
        String model = req.getParameter("model");
        // 材质
        String stuff = req.getParameter("stuff");
        // 页码
        String page = req.getParameter("p");
        // 排序
        String o = req.getParameter("o");
        // 单查
        String from = req.getParameter("from");

        int supId = 0;

        if (StringUtils.isNumeric(sup)) {
            supId = Integer.parseInt(sup);
        }

        int pageNum = 1;

        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }

        int order = 0;

        if (StringUtils.isNumeric(o)) {
            order = Integer.parseInt(o);
        }
        
        if (brand == null) {
            brand = "";
        }

        if (model == null) {
            model = "";
        }
        
        if (stuff == null) {
            stuff = "";
        }

        if (q == null) {
            q = "";
        }
        int priceStart = 0, priceEnd = 0;

            if (StringUtils.isNumeric(price1)) {
                priceStart = Integer.parseInt(price1);
            }

            if (StringUtils.isNumeric(price2)) {
                priceEnd = Integer.parseInt(price2);
            }

        int total = goodsService.getProfGoodsCount(supId, priceStart, priceEnd, brand, q.toUpperCase().replaceAll(" ", ""), desc, model.toUpperCase().replaceAll(" ", ""), stuff.toUpperCase().replaceAll(" ", ""), cat1, cat2, cat3);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (pageNum > pages) {
            pageNum = pages;
        }
        User user = (User)session.getAttribute(SessionKeys.LOGIN_USER);
        if (total > 0) {

            map.put("list", goodsService.searchProfGoods(supId, priceStart, priceEnd, brand, q.toUpperCase().replaceAll(" ", ""), desc, model.toUpperCase().replaceAll(" ", ""), stuff.toUpperCase().replaceAll(" ", ""), cat1, cat2, cat3, user == null ? null : user.getCompanyId(), order, pageNum, PAGE_SIZE));
            map.put("hot", goodsService.getProfHotGoods(cat1, 3));
        }
        if (desc == null) {
            desc = "";
        }
        map.put("searchBrand", brand);
        map.put("sup", supId);
        /*
        if ("sup".equals(from)) {
            map.put("supList", goodsService.getProfSup(null, null, null, supId, null, null, null, null, user == null ? null : user.getCompanyId()));
        } else {

            map.put("supList", goodsService.getProfSup(cat1, cat2, cat3, 0, q, model, brand, desc, user == null ? null : user.getCompanyId()));
        }
        */

        map.put("supList", goodsService.getAllProfSup(user == null ? null : user.getCompanyId()));
        
        if (StringUtils.isNotEmpty(cat2)) {
            map.put("catList", categoryService.getMarketCatByParent(cat2));
        }
        

        if (cat1 == null) {
            cat1 = "";
        }

        if (cat2 == null) {
            cat2 = "";
        }

        if (cat3 == null) {
            cat3 = "";
        }
        
        map.put("price1", priceStart);
        map.put("price2", priceEnd);
        map.put("cat1", cat1);
        map.put("cat2", cat2);
        map.put("cat3", cat3);
        map.put("model", model);
        map.put("stuff", stuff);
        map.put("desc", desc);
        map.put("total", total);
        map.put("order", order);
        map.put("page", pageNum);
        map.put("searchType", 1);
        map.put("searchKeyword", q);
        /*
        if ("brand".equals(from)) {
            List<String> brands = new ArrayList<String>();
            brands.add(brand);
        } else {
            map.put("brandList", goodsService.getProfBrand(cat1, cat2, cat3, supId, q, model, desc));
        }
        */
        map.put("brandList", goodsService.getProfBrand(null, null, null, 0, null, null, null));
        try {
            map.put("pageAction", "market/goods/prof?sup=" + supId + "&cat1=" + cat1 + "&cat2=" + cat2 + "&cat3=" + cat3 + "&price1=" + priceStart + "&price2=" + priceEnd + "&brand=" + URLEncoder.encode(brand, "GBK") + "&stuff=" + URLEncoder.encode(stuff, "GBK") + "&q=" + URLEncoder.encode(q, "GBK") + "&model=" + URLEncoder.encode(model, "GBK") + "&desc=" + URLEncoder.encode(desc, "GBK") + "&from=" + from + "&o=" + order + "&p=%PAGE%");
        } catch (UnsupportedEncodingException e) {
        }
        map.put("pages", pages);

        return "goods/prof";
    }
    
    @RequestMapping("/prof/brand")
    @ResponseBody
    public ResultObject profBrand(@RequestParam("cat") String cat) {
        return new ResultObject(ResultObject.OK, goodsService.getProfBrand(null, null, cat, 0, null, null, null));
    }

    @RequestMapping("/prof/sup")
    @ResponseBody
    public ResultObject profSup(HttpServletRequest req) {
        String cat = req.getParameter("cat");
        String brand = req.getParameter("brand");
        return new ResultObject(ResultObject.OK, goodsService.getProfSup(null, null, cat, 0, null, null, brand, null, null));
    }

    @RequestMapping("/show")
    public String show(HttpServletRequest req, Map<String, Object> map) {
        // 供应商编号
        String sid = req.getParameter("sid");
        // 商品编号
        String gid = req.getParameter("gid");

        if (!StringUtils.isNumeric(sid) || StringUtils.isEmpty(gid)) {
            throw new PageNotFoundException();
        }

        logger.info("商品详情Controller-sid[" + sid + "], gid[" + gid + "]");

        Goods goods = goodsService.getGoodsDetail(Integer.parseInt(sid), gid);
        if (goods == null) {
            return "goods/fail";
        }

        map.put("goods", goods);
        int catId = dataCache.getSysCatId(goods.getSupId(), goods.getSupCatId());
        int cat1 = 0, cat2 = 0, cat3 = 0;
        cat1 = catId / 10000;
        cat2 = catId / 100;
        cat3 = catId;
        map.put("cat1", cat1);
        map.put("cat2", cat2);
        map.put("cat3", cat3);
        map.put("sup", dataCache.getSupplier(goods.getSupId()));

        return "goods/detail";
    }

    @RequestMapping("/compare/add")
    @ResponseBody
    public ResultObject compareAdd(HttpServletRequest req, HttpSession session) {
        Permission.check(session, UserRole.BUY, UserRole.CLIENT);
        // 供应商编号
        String sid = req.getParameter("sid");
        // 商品编号
        String gid = req.getParameter("gid");

        logger.info("添加比对-sid[" + sid + "], gid[" + gid + "]");

        if (!StringUtils.isNumeric(sid) || StringUtils.isEmpty(gid)) {
            logger.error("添加比对-参数无效-sid[" + sid + "], gid[" + gid + "]");
            return new ResultObject(ResultObject.FAIL, "参数无效");
        }

        Goods goods = goodsService.getGoodsSimple(Integer.parseInt(sid), gid);

        if (goods == null) {
            return new ResultObject(ResultObject.FAIL, "商品无效或已下架");
        }
        Supplier s = dataCache.getSupplier(goods.getSupId());
        if (s.getSupType() == 0) {
        goods.setSysCatId(dataCache.getSysCatId(goods.getSupId(), goods.getSupCatId()));
        }

        List<CompareItem> items = (List<CompareItem>) session.getAttribute(SessionKeys.MARKET_COMPARE);

        if (items != null && items.size() > 0) {
            // 已存在
            for (CompareItem i : items) {
                if (i.getSupId() == goods.getSupId() && i.getSupGoodsId().equals(goods.getSupGoodsId())) {
                    return new ResultObject(ResultObject.OK, items);
                }
            }
            /*
             * // 不同类 if (items.get(0).getSysCatId() != goods.getSysCatId()) {
             * return new ResultObject(10, items); }
             */
            // 已满
            if (items.size() > 3) {
                return new ResultObject(20, items);
            }
        } else {
            items = new ArrayList<CompareItem>();
        }

        CompareItem item = new CompareItem();
        item.setAgreePrice(goods.getAgreePrice());
        item.setGoodsName(goods.getGoodsName());
        item.setImagePath(goods.getImagePath());
        item.setSupGoodsId(goods.getSupGoodsId());
        item.setSupId(goods.getSupId());
        item.setSysCatId(goods.getSysCatId());
        item.setSupType(s.getSupType());
        items.add(item);
        
        session.setAttribute(SessionKeys.MARKET_COMPARE, items);

        return new ResultObject(ResultObject.OK, items);
    }

    @RequestMapping("/compare/clear")
    @ResponseBody
    public ResultObject compareClear(HttpSession session) {
        Permission.check(session, UserRole.BUY, UserRole.CLIENT);
        logger.info("清空比对");

        session.removeAttribute(SessionKeys.MARKET_COMPARE);

        return new ResultObject(ResultObject.OK, "");
    }

    @RequestMapping("/trade")
    public String trade(HttpServletRequest req, Map<String, Object> map) {
        // 供应商编号
        String sid = req.getParameter("sid");
        // 商品编号
        String gid = req.getParameter("gid");
        // 页码
        String page = req.getParameter("page");

        logger.info("商品交易记录Controller-sid[" + sid + "], gid[" + gid + "], page[" + page + "]");

        if (StringUtils.isEmpty(gid) || !StringUtils.isNumeric(sid)) {
            logger.info("商品交易记录Controller-参数无效-sid[" + sid + "], gid[" + gid + "], page[" + page + "]");
            return "goods/trade";
        }

        int pageNum = 1;

        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }

        int total = goodsService.getTradeRecordCount(Integer.parseInt(sid), gid);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);

        if (pageNum > pages) {
            pageNum = pages;
        }
        if (total > 0) {
            map.put("list", goodsService.getTradeRecordList(Integer.parseInt(sid), gid, pageNum, PAGE_SIZE));
        }

        map.put("total", total);
        map.put("page", pageNum);
        map.put("pageAction", "market/goods/trade?sid=" + sid + "&gid=" + gid + "&page=%PAGE%");
        map.put("pages", pages);

        return "goods/trade";
    }
    
    /**
     *检查用户是否登录
     * @param supplierRecommend
     * @param req
     * @param map
     * @param httpSession
     * @return
     */
    @RequestMapping("/prof/isLogin")
    @ResponseBody
    public Object isLogin(@ModelAttribute("enquiryGoods")EnquiryGoods enquiryGoods,HttpServletRequest req,HttpSession httpSession) {
    	User user = null;
    	Map<String, Object> map = new HashMap<String, Object>();
    	try {
    		user = Permission.check(httpSession, UserRole.BUY, UserRole.CLIENT);
    	} catch (UserNotLoginException e) {
    		map.put("isLogin", "0");
    		return map;
		} catch (NoPermissionException e){
			map.put("isLogin", "0");
    		return map;
		}
    	enquiryGoods.setUserID(user.getUserId());
    	int canEnquiry = enquiryGoodsService.canEnquiry(enquiryGoods);
    	if(canEnquiry>0){
    		map.put("canEnquiry", "0");
    	}else{
    		map.put("canEnquiry", "1");
    	}
    	
    	return map;
    }
    /**
     * 跳转询价页面
     * @param supplierRecommend
     * @param req
     * @param map
     * @param httpSession
     * @return
     */
    @RequestMapping("/prof/professionEnquiryPage")
    public Object professionEnquiryPage(@ModelAttribute("enquiryGoods")EnquiryGoods enquiryGoods,HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
    	/*String goodsName  = "";
    	try {
    		goodsName = new String(req.getParameter("goodsName").getBytes("iso-8859-1"));
    		enquiryGoods.setGoodsName(goodsName);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}*/
    	  
    	String goodsName  = req.getParameter("goodsName");
    	enquiryGoods.setGoodsName(goodsName);
    	map.put("enquiryGoods", enquiryGoods);
    	return "goods/professionEnquiry";
    }
    /**
     * 添加询价信息
     * @param supplierRecommend
     * @param req
     * @param map
     * @param httpSession
     * @return
     */
    @RequestMapping("/prof/professionEnquiry")
    @ResponseBody
    public Object professionEnquiry(@ModelAttribute("enquiryGoods")EnquiryGoods enquiryGoods,HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
    	User user = Permission.check(httpSession, UserRole.BUY, UserRole.CLIENT);
    	enquiryGoods.setUserID(user.getUserId());
    	enquiryGoodsService.addEnquiryGoods(enquiryGoods);
    	return "success";
    }
}
