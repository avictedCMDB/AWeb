package com.avic.market.controllers;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.avic.common.constants.SessionKeys;
import com.avic.common.constants.UserRole;
import com.avic.common.utils.Permission;
import com.avic.market.models.BidProject;
import com.avic.market.models.OffStandardRequire;
import com.avic.market.services.BidProjectService;
import com.avic.market.services.GoodsService;
import com.avic.market.services.OffStandardRequireService;
import com.avic.market.services.SupplierService;
import com.avic.passport.models.User;

@Controller
@RequestMapping("/home")
public class HomeController {
    protected static final Log logger = LogFactory.getLog(HomeController.class);

    @Autowired
    BidProjectService bidProjectService;
    @Autowired
    GoodsService goodsService;
    @Autowired
    SupplierService supplierService;
    @Autowired
    OffStandardRequireService offStandardRequireService;
    
    @RequestMapping("")
    public String index(Map<String, Object> map, HttpSession sess) {
        logger.info("ÐÂÊ×Ò³");
        List<BidProject> notices = bidProjectService.getNoticeList(null, null, null, null, 1, 10);
        map.put("notice_top", notices.subList(0, 3));
        map.put("goods", goodsService.getRandomGoods(8));
        map.put("notices", notices);
        map.put("results", bidProjectService.getResultList(null, null, null, null, 7, 1, 10));
        List<OffStandardRequire> reqs = offStandardRequireService.queryLastestRequires(10);

        if (reqs != null && reqs.size() > 0) {
            for (OffStandardRequire i : reqs) {
                try {
                    i.setIndexLink(URLEncoder.encode(i.getGoodsName(), "GBK"));
                } catch (UnsupportedEncodingException e) {
                }
                
            }
        }

        User user = null;
        try {
            user = Permission.check(sess, UserRole.BUY, UserRole.CLIENT);
        } catch(Exception e) {}
        String supCode = (String) sess.getAttribute(SessionKeys.SUP_CODE);
        
        if (user != null || StringUtils.isEmpty(supCode)) {
            map.put("reqLink", "management/specialGoods/offStandardRequirePage");
        } else {
            map.put("reqLink", "supplier/offStandRequire");
        }
        map.put("reqs", reqs);
        map.put("sups", supplierService.getRecommandSup(16));
        return "index_new";
    }
}
