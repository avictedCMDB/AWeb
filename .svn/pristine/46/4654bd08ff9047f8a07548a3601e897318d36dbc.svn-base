package com.avic.common.imageUpload;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.lang3.math.NumberUtils;

import com.avic.common.constants.SessionKeys;
import com.avic.common.constants.UserRole;
import com.avic.common.utils.ConfigHolder;
import com.avic.common.utils.Permission;
import com.avic.passport.models.User;

/**
 * Servlet implementation class for Servlet: UploadServlet
 * 
 */
public class UploadServlet extends javax.servlet.http.HttpServlet implements
		javax.servlet.Servlet {
	static final long serialVersionUID = 1L;

	public static final String UPLOAD_STATUS = "UPLOAD_STATUS";

	private String UPLOAD_DIR;//文件上传路径

	public String getUPLOAD_DIR() {
		return UPLOAD_DIR;
	}

	public void setUPLOAD_DIR(String upload_dir) {
		UPLOAD_DIR = upload_dir;
	}

	public UploadServlet() {
		super();
	}

	/**
	 * 从文件路径中取出文件名
	 * 
	 * @param filePath
	 * @return
	 */
	private String takeOutFileName(String filePath) {
		int pos = filePath.lastIndexOf(File.separator);
		if (pos > 0) {
			return filePath.substring(pos + 1);
		} else {
			return filePath;
		}
	}

	/**
	 * 从request中取出FileUploadStatus Bean
	 * 
	 * @param request
	 * @return
	 */
	public static FileUploadStatus takeOutFileUploadStatusBean(
			HttpSession session) {
		Object obj = session.getAttribute(UPLOAD_STATUS);
		if (obj != null) {
			return (FileUploadStatus) obj;
		} else {
			return null;
		}
	}

	/**
	 * 把FileUploadStatus Bean保存到session
	 * 
	 * @param request
	 * @param uploadStatusBean
	 */
	public static void storeFileUploadStatusBean(HttpSession session,
			FileUploadStatus uploadStatusBean) {
		session.setAttribute(UPLOAD_STATUS, uploadStatusBean);
	}

	/**
	 * 删除已经上传的文件
	 * 
	 * @param request
	 */
	private void deleteUploadedFile(HttpServletRequest request) {
		FileUploadStatus fUploadStatus = takeOutFileUploadStatusBean(request
				.getSession());
		File uploadedFile = new File(request.getRealPath(fUploadStatus.getDelImgName()));
		uploadedFile.delete();
		fUploadStatus.setStatus("删除已上传的文件");
		storeFileUploadStatusBean(request.getSession(), fUploadStatus);
	}

	/**
	 * 上传过程中出错处理
	 * 
	 * @param request
	 * @param errMsg
	 * @throws IOException
	 * @throws ServletException
	 */
	private void uploadExceptionHandle(HttpServletRequest request, String errMsg)
			throws ServletException, IOException {
		// 首先删除已经上传的文件
		deleteUploadedFile(request);
		FileUploadStatus fUploadStatus = takeOutFileUploadStatusBean(request
				.getSession());
		fUploadStatus.setStatus(errMsg);
		storeFileUploadStatusBean(request.getSession(), fUploadStatus);
	}

	/**
	 * 初始化文件上传状态Bean
	 * 
	 * @param request
	 * @return
	 */
	private FileUploadStatus initFileUploadStatusBean(HttpServletRequest request) {
		FileUploadStatus fUploadStatus = new FileUploadStatus();
		fUploadStatus.setStatus("上传中...");
		fUploadStatus.setUploadTotalSize(request.getContentLength());
		fUploadStatus.setProcessStartTime(System.currentTimeMillis());
		String mark = request.getParameter("mark");
		fUploadStatus.setMark(mark);
		if("buy".equals(mark) || "chk".equals(mark)){
			this.setUPLOAD_DIR(ConfigHolder.getInstance().getConfig("market_url"));
		}else if("sup".equals(mark)){
			this.setUPLOAD_DIR(ConfigHolder.getInstance().getConfig("supplier_url"));
		}else{//非标商品维护
			this.setUPLOAD_DIR(ConfigHolder.getInstance().getConfig("off_standard"));
		}
		fUploadStatus.setBaseDir(request.getContextPath() + this.getUPLOAD_DIR());
		fUploadStatus.setImgCount(request.getParameter("imgCount"));
		fUploadStatus.setDelImgName(request.getParameter("delImgName"));
		String cancelStr = request.getParameter("cancel");
		if(cancelStr!=null && !"".equals(cancelStr)){
			fUploadStatus.setCancel(Boolean.valueOf(cancelStr));
			fUploadStatus.setDelImgName(request.getParameter("delImgName"));
		}
		return fUploadStatus;
	}

	/**
	 * 处理文件上传
	 * 
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws ServletException
	 */
	private void processFileUpload(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		DiskFileItemFactory factory = new DiskFileItemFactory();
		// 设置内存阀值，超过后写入临时文件
		// factory.setSizeThreshold(10240000*5);
		// 设置临时文件存储位置
		// factory.setRepository(new File(request.getRealPath("/upload/temp")));
		ServletFileUpload upload = new ServletFileUpload(factory);
		//设置单个文件的最大上传size
//		upload.setFileSizeMax(1024000*4);
		// 设置整个request的最大size
		// upload.setSizeMax(10240000*5);
		// 注册监听类
		upload.setProgressListener(new UploadListener(request.getSession()));
		// 保存初始化后的FileUploadStatus Bean
		storeFileUploadStatusBean(request.getSession(),
				initFileUploadStatusBean(request));

		try {
			List items = upload.parseRequest(request);
			// 处理文件上传
			for (int i = 0; i < items.size(); i++) {
				FileItem item = (FileItem) items.get(i);

				// 取消上传
				if (takeOutFileUploadStatusBean(request.getSession())
						.getCancel()) {
					deleteUploadedFile(request);
					break;
				}
				// 保存文件
				else if (!item.isFormField() && item.getName().length() > 0) {
					String realFileName = takeOutFileName(item.getName());
					String fileName_suffix = takeOutFileName(item.getName());
					//获取文件后缀
					if(fileName_suffix.lastIndexOf(".")>0){
						fileName_suffix=fileName_suffix.substring(fileName_suffix.lastIndexOf("."), fileName_suffix.length()).toLowerCase();
					}
					SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmssS");//设置日期格式
					String fileName = realFileName.substring(0,realFileName.lastIndexOf(".")) + df.format(new Date()) + fileName_suffix;
					
					String mark = request.getParameter("mark");
					String userId = "default";
					User user = null;
					try {
						if("buy".equals(mark) || "ask".equals(mark)){
							//购买者
				            user = Permission.check(request.getSession(), UserRole.BUY, UserRole.CLIENT);
				            userId = user.getUserId();
				            System.out.println("===============buy-userId="+userId);
						}else if("chk".equals(mark)){
							//审核者
							user = Permission.check(request.getSession(), UserRole.CHECK, UserRole.CLIENT);
				            userId = user.getUserId();
				            System.out.println("===============chk-userId="+userId);
						}else if("sup".equals(mark)){
							//服务商
							String supId = request.getSession().getAttribute(SessionKeys.SUP_ID).toString();
							userId = supId;
							System.out.println("===============sup-userId="+userId);
						}
					} catch (Exception e) {
			        	System.out.println("文件上传时，获取用户名失败。");
			        }
					
					String directory = request.getSession().getServletContext().getRealPath(this.getUPLOAD_DIR()) + File.separator + userId + File.separator;//上传实际路径
					String show_dir = this.getUPLOAD_DIR() + "/" + userId + "/";//页面回显图片路径
					File uploadedFile = new File(directory,fileName);
			        if(uploadedFile.exists()) {
			          // 文件已经存在，输出文件的相关信息
			            System.out.println("（"+directory+"）文件路径已经存在，不用再次创建。");
			        } else {
			          //  文件路径不存在，先创建文件所在的目录
			        	uploadedFile.getParentFile().mkdirs();
			        }
					
					item.write(uploadedFile);
					// 更新上传文件列表
					FileUploadStatus fUploadStatus = takeOutFileUploadStatusBean(request
							.getSession());
					fUploadStatus.setBaseDir(show_dir);
					fUploadStatus.getUploadFileUrlList().add(fileName);
					storeFileUploadStatusBean(request.getSession(),
							fUploadStatus);
					Thread.sleep(500);
				}
			}

		} catch (FileUploadException e) {
			e.printStackTrace();
			// uploadExceptionHandle(request,"上传文件时发生错误:"+e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			// uploadExceptionHandle(request,"保存上传文件时发生错误:"+e.getMessage());
		}
	}

	/**
	 * 回应上传状态查询
	 * 
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	private void responseFileUploadStatusPoll(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		FileUploadStatus fUploadStatus = (FileUploadStatus) request
				.getSession().getAttribute(UPLOAD_STATUS);
		// 计算上传完成的百分比
		long percentComplete = (long) Math.floor(((double) fUploadStatus
				.getReadTotalSize() / (double) fUploadStatus
				.getUploadTotalSize()) * 100.0);
		System.out.println("com:" + percentComplete);
		response.setContentType("text/xml");
		response.setCharacterEncoding("UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		if (((long) fUploadStatus.getReadTotalSize() == (long) fUploadStatus
				.getUploadTotalSize())
				|| (fUploadStatus.getCancel() == true)) {
			List uploadFileList = fUploadStatus.getUploadFileUrlList();
			int imgSort = NumberUtils.toInt(fUploadStatus.getImgCount())+1;
			String imgPathHiddenHtml = "<input id='hiddenPath_"+imgSort+"' name='hidden_path' type='hidden' value='"+fUploadStatus.getBaseDir()
					+uploadFileList.get(uploadFileList.size()-1)+"'>";
			response.getWriter().write(imgPathHiddenHtml);//把图片路径传回来
		} else {
			response
					.getWriter()
					.write(
							fUploadStatus.getStatus().toString()
									+ "<div class=\"prog-border\"><div class=\"prog-bar\" style=\"width: "
									+ percentComplete + "%;\"></div></div>");
		}
	}

	/**
	 * 处理取消文件上传
	 * 
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	private void processCancelFileUpload(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		FileUploadStatus fUploadStatus = (FileUploadStatus) request
				.getSession().getAttribute(UPLOAD_STATUS);
		fUploadStatus.setCancel(true);
		request.getSession().setAttribute(UPLOAD_STATUS, fUploadStatus);
		responseFileUploadStatusPoll(request, response);
	}

	/**
	 * 在上传文件列表中查找与文件名相关的id
	 * 
	 * @param request
	 * @param fileName
	 *            文件名
	 * @return 找到返回id,否则返回-1
	 */
	private int findFileIdInFileUploadedList(HttpServletRequest request,
			String fileName) {
		FileUploadStatus fileUploadStatus = takeOutFileUploadStatusBean(request
				.getSession());
		for (int i = 0; i < fileUploadStatus.getUploadFileUrlList().size(); i++) {
			if (fileName.equals((String) fileUploadStatus
					.getUploadFileUrlList().get(i))) {
				return i;
			}
		}
		return -1;
	}
	
	/**
	 * 删除图片
	 */
	private void deleteFile(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		String delImgName = java.net.URLDecoder.decode(request.getParameter("delImgName") , "UTF-8");;
		File deleteFile = new File(request.getRealPath(delImgName));
        deleteFile(deleteFile);
	}
	
	private void deleteFile(File f) {
        // 如果是文件,直接删除
        if (f.isFile()) {
            f.delete();
            return;
        }
    }

	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		doPost(request, response);
	}

	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		boolean isMultipart = ServletFileUpload.isMultipartContent(request);
		String cancelStr = request.getParameter("cancel");
		//删除图片
		if(("true".equals(cancelStr))){
			deleteFile(request,response);
		}
		
		if (isMultipart) {
			processFileUpload(request, response);
		} else {
			request.setCharacterEncoding("UTF-8");

			if (request.getParameter("uploadStatus") != null) {
				//回应上传状态查询
				responseFileUploadStatusPoll(request, response);
			}
			if (request.getParameter("cancelUpload") != null) {
				processCancelFileUpload(request, response);
			}
		}
	}
	
}