package com.avic.supervise.services.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.avic.supervise.mappers.CompanyInfoMapper;
import com.avic.supervise.models.CompanyInfo;
import com.avic.supervise.models.DepartmentNode;
import com.avic.supervise.models.Menu;
import com.avic.supervise.models.Node;
import com.avic.supervise.services.CompanyInfoService;

@Service
public class CompanyInfoServiceImpl implements CompanyInfoService {
    protected static final Log logger = LogFactory.getLog(CompanyInfoServiceImpl.class);

    @Autowired
    CompanyInfoMapper companyInfoMapper;

	@Override
	public List<CompanyInfo> queryCompanyInfoList(CompanyInfo companyInfo) {
		return companyInfoMapper.queryCompanyInfoList(companyInfo);
	}

	@Override
	public int getCompanyInfoCount(CompanyInfo companyInfo) {
		return companyInfoMapper.getCompanyInfoCount(companyInfo);
	}

	@Override
	public void updateCompanyInfo(CompanyInfo companyInfo) {
		companyInfoMapper.updateCompanyInfo(companyInfo);
	}

	@Override
	public void addCompanyInfo(CompanyInfo companyInfo) {
		companyInfoMapper.addCompanyInfo(companyInfo);
	}

	@Override
	public CompanyInfo queryCompanyInfo(CompanyInfo companyInfo) {
		return companyInfoMapper.queryCompanyInfo(companyInfo);
	}

	@Override
	public void deleteCompany(CompanyInfo companyInfo) {
		companyInfoMapper.deleteCompany(companyInfo);
	}

	@Override
	public int getCompanyInfoCountByCompanyName(CompanyInfo companyInfo) {
		return companyInfoMapper.getCompanyInfoCountByCompanyName(companyInfo);
	}

	@Override
	public String getSeqID() {
		return companyInfoMapper.getSeqID();
	}

	@Override
	public List<CompanyInfo> querySupplierCompanyInfoList(
			CompanyInfo companyInfo) {
		return companyInfoMapper.querySupplierCompanyInfoList(companyInfo);
	}

	@Override
	public List<DepartmentNode> queryDepartments(CompanyInfo companyInfo) {
		CompanyInfo ci = new CompanyInfo();
		List<CompanyInfo> companys = new ArrayList<CompanyInfo>();
		companys = companyInfoMapper.queryDepartments(companyInfo);
		List<DepartmentNode> nodes = new ArrayList<DepartmentNode>();
		nodes = queryDepartments(companys,companyInfo.getCompanyCode());
		//ci = recursiveTreeDepartment(companyInfo.getCompanyCode(),companys);
		return nodes;
	}
	
	
	public List<DepartmentNode> queryDepartments(List<CompanyInfo> companyInfos,String companyInfoCode) {
		// 节点列表（散列表，用于临时存储节点对象）
		HashMap nodeList = new HashMap();
		// 根据结果集构造节点列表（存入散列表）
		for (Iterator it = companyInfos.iterator(); it.hasNext();) {
			CompanyInfo dataRecord = (CompanyInfo) it.next();
			DepartmentNode node = new DepartmentNode();
			node.id = dataRecord.getCompanyCode();
			node.text = dataRecord.getCompanyName();
			node.parentId = dataRecord.getParentCompanyId();
			node.menuLevel = dataRecord.getLevel();
			nodeList.put(node.id, node);
		}
		// 构造无序的多叉树
		Set entrySet = nodeList.entrySet();
		List<DepartmentNode> rootList =  new ArrayList<DepartmentNode>();
		for (Iterator it = entrySet.iterator(); it.hasNext();) {
			DepartmentNode node = (DepartmentNode) ((Map.Entry) it.next()).getValue();
			if (companyInfoCode.equals(node.id)) {
				rootList.add(node);
			} else {
				((DepartmentNode) nodeList.get(node.parentId)).addChild(node);
			}
		}
		/*for (int i = 0; i < rootList.size(); i++) {
			rootList.get(i).sortChildren();
		}*/
		return rootList;
	}

	 /**
     * 递归算法解析成树形结构
     */
     public CompanyInfo recursiveTreeDepartment(String companyCode,List<CompanyInfo> companyInfos) {
    	 CompanyInfo companyInfo = new CompanyInfo();
 	    List<CompanyInfo> subCompanyInfos = new ArrayList<CompanyInfo>();
 	    for (CompanyInfo parent : companyInfos) {
 			if(companyCode.equals(parent.getCompanyCode())){
 				companyInfo = parent;
 			}else if(companyCode.equals(parent.getParentCompanyId())){
 				subCompanyInfos.add(parent);
 			}
 		}
 	    //遍历子节点
 	    for(CompanyInfo subChild : subCompanyInfos){
 	    	CompanyInfo c = recursiveTreeDepartment(subChild.getCompanyCode(),companyInfos); //递归
 	    	companyInfo.getChildDepartments().add(c);
 	    }
 	    return companyInfo;
     }
}
