package com.avic.market.services.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.avic.market.mappers.BidProjSupplierMapper;
import com.avic.market.mappers.BidProjectMapper;
import com.avic.market.mappers.BidSupplierQuotaMapper;
import com.avic.market.models.BidProjSupplier;
import com.avic.market.models.BidSupplierQuota;
import com.avic.market.services.BidQuotaService;

@Service
public class BidQuotaServiceImpl implements BidQuotaService {

    
    @Autowired
    BidProjSupplierMapper bidProjSupplierMapper;
    
    @Autowired
    BidSupplierQuotaMapper bidSupplierQuotaMapper;
    
    @Autowired
    BidProjectMapper bidProjectMapper;

    @Override
    public BidProjSupplier getSupplier(String projId, String supCode) {
        return bidProjSupplierMapper.querySupplierById(projId, supCode);
    }
    
    @Override
    public void joinSupplier(String projId, String supCode) {
        BidProjSupplier sup = new BidProjSupplier();
        sup.setProjId(projId);
        sup.setSupCode(supCode);
        sup.setAuditStatus(1);
        sup.setJoinType(2);
        
        bidProjSupplierMapper.insertProjSupplier(sup);
    }

    @Override
    public void updateSupplierTrialThreshold(String projId, String supCode, int val) {
        bidProjSupplierMapper.updateTrialThreshold(projId, supCode, val);
    }

    @Override
    public void updateSupplierRealThreshold(String projId, String supCode, int val) {
        bidProjSupplierMapper.updateRealThreshold(projId, supCode, val);
    }
    
    @Override
    public List<BidSupplierQuota> getRealSupplierQuota(String projId, String supCode) {
        return bidSupplierQuotaMapper.querySupplierQuota(projId, supCode, 2);
    }
    
    @Override
    public List<BidSupplierQuota> getTrialSupplierQuota(String projId, String supCode) {
        return bidSupplierQuotaMapper.querySupplierQuota(projId, supCode, 1);
    }

    @Override
    public List<BidSupplierQuota> getRealQuotaRank(String projId) {
        return bidSupplierQuotaMapper.queryRealQuotaRank(projId);
    }
    @Override
    public List<BidSupplierQuota> getTrialQuotaRank(String projId) {
        return bidSupplierQuotaMapper.queryTrialQuotaRank(projId);
    }
    
    @Transactional
    @Override
    public void quota(BidSupplierQuota quota) {
        bidSupplierQuotaMapper.insertSupplierQuota(quota);
        
        if (quota.getQuotaType() == 1) {
            bidProjSupplierMapper.updateTrialQuota(quota.getProjId(), quota.getSupCode(), quota.getQuotaNum(), quota.getQuotaRound());
        } else {
            bidProjSupplierMapper.updateRealQuota(quota.getProjId(), quota.getSupCode(), quota.getQuotaNum(), quota.getQuotaRound());
        }
        
        if (quota.getTimeoutFlag() == 1) {
            bidProjectMapper.updateTimeoutEndTime(quota.getProjId());
        }
    }
}
