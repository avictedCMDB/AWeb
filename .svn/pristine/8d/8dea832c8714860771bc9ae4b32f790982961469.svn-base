package com.avic.management.controllers.bid;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.beans.ResultObject;
import com.avic.common.constants.SessionKeys;
import com.avic.common.constants.UserRole;
import com.avic.common.exceptions.NoPermissionException;
import com.avic.common.exceptions.UserNotLoginException;
import com.avic.common.utils.Permission;
import com.avic.management.models.BidContractFile;
import com.avic.management.models.BidProjSupplier;
import com.avic.management.services.BidContractService;
import com.avic.management.services.BidSupplierService;
import com.avic.passport.models.User;

@Controller("BidContractController")
@RequestMapping("/bid/contract")
public class ContractController {
    protected static final Log logger = LogFactory.getLog(ContractController.class);
    
    @Autowired
    BidSupplierService bidSupplierService;
    
    @Autowired
    BidContractService bidContractService;

    @RequestMapping("")
    public String index(HttpSession sess, Map<String, Object> map) {
        logger.info("合同管理");
        User user = null;
        try {
            user = Permission.check(sess, UserRole.BUY, UserRole.CLIENT);
        } catch (UserNotLoginException e) {
            return "redirect:/passport/login";
        } catch (NoPermissionException e) {
            return "redirect:/passport/login";
        }
        return "bid/contract";
    }


    @RequestMapping("/data")
    @ResponseBody
    public ResultObject data(HttpSession sess, @RequestParam(value = "projId", defaultValue = "") String projId,
            @RequestParam(value = "projName", defaultValue = "") String projName,
            @RequestParam(value = "contractStatus", defaultValue = "0") int contractStatus,
            @RequestParam(value = "startTime", defaultValue = "") String startTime,
            @RequestParam(value = "endTime", defaultValue = "") String endTime,
            @RequestParam(value = "page", defaultValue = "1") int page) {

        User user = null;
        try {
            user = Permission.check(sess, UserRole.BUY, UserRole.CLIENT);
        } catch (Exception e) {
            return new ResultObject(ResultObject.FAIL, "未登录或无权限");
        }

        int size = 10;

        int total = bidSupplierService.querySupplierContractCount(user.getUserId(), projId, projName, contractStatus, startTime, endTime);

        int pages = (int) Math.ceil((double) total / size);

        if (page > pages) {
            page = pages;
        }

        Map<String, Object> map = new HashMap<String, Object>();
        if (total > 0) {
            map.put("data", bidSupplierService.querySupplierContractList(user.getUserId(), projId, projName, contractStatus, startTime, endTime, pages, size));
        }
        map.put("pages", pages);
        return new ResultObject(ResultObject.OK, map);
    }
    

    @RequestMapping("/audit")
    public String audit(@RequestParam("projId") String projId, @RequestParam("supCode") String supCode, HttpSession sess, Map<String, Object> map) {
        logger.info("合同管理-审核");
        User user = null;
        try {
            user = Permission.check(sess, UserRole.BUY, UserRole.CLIENT);
        } catch (UserNotLoginException e) {
            return "redirect:/passport/login";
        } catch (NoPermissionException e) {
            return "redirect:/passport/login";
        }
        
        BidProjSupplier sup = bidSupplierService.queryProjSupplier(projId, supCode);
        
        map.put("sup", sup);

        map.put("files", bidContractService.queryContractFileList(projId, supCode));
        
        
        return "bid/contract_audit";
    }
    


    @RequestMapping("/downfile")
    public void downfile(@RequestParam("projId") String projId, @RequestParam("supCode") String supCode, @RequestParam("fileId") String fileId, HttpServletRequest reqeust, HttpServletResponse response, HttpSession session) throws UnsupportedEncodingException {
        response.setCharacterEncoding("UTF-8");
        response.setContentType("multipart/form-data");
        BidContractFile c = bidContractService.queryContractFileById(projId, supCode, fileId);
        String fileName = reqeust.getSession().getServletContext().getRealPath("/") + c.getFilePath();
        response.setHeader("Content-Disposition", "attachment;fileName=" + java.net.URLEncoder.encode(c.getFileName(), "UTF-8"));
        try {
            File file = new File(fileName);
            InputStream inputStream = new FileInputStream(file);
            OutputStream os = response.getOutputStream();
            byte[] b = new byte[1024];
            int length;
            while ((length = inputStream.read(b)) > 0) {
                os.write(b, 0, length);
            }
            inputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    


    @RequestMapping("/audit/submit")
    @ResponseBody
    public ResultObject auditSubmit(HttpSession sess, @RequestParam(value = "projId", defaultValue = "") String projId,
            @RequestParam(value = "supCode", defaultValue = "") String supCode,
            @RequestParam(value = "contractStatus", defaultValue = "0") int contractStatus,
            @RequestParam(value = "contractRemark", defaultValue = "") String contractRemark) {

        bidContractService.updateContractStatus(projId, supCode, contractStatus, contractRemark);

        return new ResultObject(ResultObject.OK, "");
    }
}
