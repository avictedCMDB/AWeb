package com.avic.management.controllers;

import java.awt.geom.Area;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.HttpRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.constants.UserRole;
import com.avic.common.exceptions.NoPermissionException;
import com.avic.common.exceptions.UserNotLoginException;
import com.avic.common.utils.Permission;
import com.avic.management.models.MarketAddress;
import com.avic.management.models.SupArea;
import com.avic.management.models.SupInfo;
import com.avic.management.services.CommonService;
import com.avic.management.services.MarketAddressService;
import com.avic.management.services.SupAreaService;
import com.avic.management.services.SupInfoService;
import com.avic.market.cpi.exceptions.NoSuchSupplierException;
import com.avic.market.cpi.exceptions.ServiceExecutionFailedException;
import com.avic.passport.models.User;

@Controller
@RequestMapping("/address")
public class MarketAddressController {
    protected static final Log logger = LogFactory.getLog(MarketAddressController.class);
    static final int PAGE_SIZE = 10; //每页显示多少条
    @Autowired
    MarketAddressService marketAddressService;
    @Autowired
    SupInfoService supInfoService;
    @Autowired
    SupAreaService areaService;
    @Autowired
    CommonService commonService;
    
    @RequestMapping("")
    public String index(HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
        logger.info("地区管理");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
		String page = req.getParameter("page");
		
		int pageNum = 1;
		 
        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }
        MarketAddress marketAddress = new MarketAddress();
        marketAddress.setUserID(user.getUserId());
        //查询数量
        int total = marketAddressService.queryMarketAddressCount(marketAddress);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);
        
        if (pageNum > pages) {
            pageNum = pages;
        }
        List<MarketAddress> marketAddresses = new ArrayList<MarketAddress>();
        marketAddress.setPage(pageNum);
        marketAddress.setPageSize(PAGE_SIZE);
        marketAddresses = marketAddressService.queryMarketAddressList(marketAddress);
        
        map.put("marketAddresses", marketAddresses);
        map.put("page", pageNum);
        map.put("total", total);
        map.put("pages", pages);
        map.put("pageAction","management/address?page=%PAGE%");
        return "management_address";
    }
    
    @RequestMapping("/delete/{addressID}")
    public String deleteAddress(Map<String, Object> map,@PathVariable("addressID")String addressID,HttpSession httpSession) {
        logger.info("删除地区");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
        marketAddressService.deleteMarketAddress(addressID);
        return "redirect:/management/address";
    }
    
    @RequestMapping("/setDefault/{addressID}")
    public String setDefault(Map<String, Object> map,@PathVariable("addressID")String addressID,HttpSession httpSession) {
        logger.info("设置默认地区");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
        MarketAddress marketAddress = new MarketAddress();
        marketAddress.setAddressID(addressID);
        marketAddressService.setDefault(marketAddress);
        marketAddressService.setOtherDefault(marketAddress);
        return "redirect:/management/address";
    }
    
    @RequestMapping("/addAddressPage")
    public String showAddAddressPage() {
        logger.info("跳转添加地址页面");
        return "management_address_add";
    }
    
    @RequestMapping("/updAddressPage/{addressID}")
    public String showUpdAddressPage(Map<String, Object> map,@PathVariable("addressID")String addressID,HttpSession httpSession) {
        logger.info("跳转修改地址页面");
        User user = new User();
        try {
        	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}
        MarketAddress marketAddress = new MarketAddress();
        marketAddress.setAddressID(addressID);
        marketAddress = marketAddressService.queryMarketAddressByAddressID(marketAddress);
        map.put("marketAddress", marketAddress);
        return "management_address_add";
    }
    
    @RequestMapping("/add")  
    public String saveMarketAddress(@ModelAttribute("marketAddress") MarketAddress marketAddress,HttpSession httpSession){ 
    	 User user = new User();
         try {
         	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
 		} catch (UserNotLoginException e) {
 			return "redirect:/passport/login";
 		} catch (NoPermissionException e){
 			return "redirect:/passport/login";
 		}
    	//从session获取userid
    	String userID = user.getUserId();
    	//生成区域id
    	String index = commonService.queryIndex();
    	marketAddress.setAddressID(index);
    	marketAddress.setUserID(userID);
    	marketAddressService.addMarketAddress(marketAddress);
    	if("1".equals(marketAddress.getIfDefault())){
    		MarketAddress ma = new MarketAddress();
    		ma.setAddressID(index);
    		marketAddressService.setOtherDefault(ma);
    	}
        return "redirect:/management/address";  
    }  
    
    @RequestMapping("/update")  
    public String updateMarketAddress(@ModelAttribute("marketAddress") MarketAddress marketAddress,HttpSession httpSession){ 
    	 User user = new User();
         try {
         	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
 		} catch (UserNotLoginException e) {
 			return "redirect:/passport/login";
 		} catch (NoPermissionException e){
 			return "redirect:/passport/login";
 		}
    	if("1".equals(marketAddress.getIfDefault())){
    		MarketAddress ma = new MarketAddress();
    		ma.setAddressID(marketAddress.getAddressID());
    		marketAddressService.setOtherDefault(ma);
    	}
    	marketAddress.setUserID(user.getUserId());
    	marketAddressService.updateMarketAddress(marketAddress);
        return "redirect:/management/address";  
    } 
    
    @RequestMapping("/loadData")
    @ResponseBody
    public Object loadData() throws NoSuchSupplierException, ServiceExecutionFailedException {
    	Map<String, Object> map = new HashMap<String, Object>();
    	//加载供应商信息
        List<SupInfo> supInfos = new ArrayList<SupInfo>();
        supInfos = supInfoService.querySupInfos();
        map.put("supInfos", supInfos);
    	return map;
    }
    
    @RequestMapping("/loadAreaDate/{supID}")
    @ResponseBody
    public Object loadAreaDate(@PathVariable("supID")String supID) throws NoSuchSupplierException, ServiceExecutionFailedException {
    	Map<String, Object> map = new HashMap<String, Object>(); 
    	//加载地区信息
        List<SupArea> areas = new ArrayList<SupArea>();
        SupArea supArea = new SupArea();
        if("3".equals(supID)){
        	supArea.setSupID("1");
        }else{
        	supArea.setSupID(supID);
        }
        
        areas = areaService.queryAreas(supArea);
        map.put("areas", areas);
        return map;
    }
    
    @RequestMapping("/loadSubArea")
    @ResponseBody
    public Object loadAreaLebelTwo(@RequestParam("parentId")String parentId,@RequestParam("supID")String supID) throws NoSuchSupplierException, ServiceExecutionFailedException {
    	SupArea supArea = new SupArea();
    	supArea.setSupParentArea(parentId);
    	if("3".equals(supID)){
    		supArea.setSupID("1");
    	}else{
    		supArea.setSupID(supID);
    	}
    	
        //加载地区信息
        List<SupArea> areas = new ArrayList<SupArea>();
        areas = areaService.querySubAreas(supArea);
    	return areas;
    }
}
