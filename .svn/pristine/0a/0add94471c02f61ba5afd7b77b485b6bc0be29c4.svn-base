package com.avic.management.controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.constants.UserRole;
import com.avic.common.exceptions.PageNotFoundException;
import com.avic.common.utils.Permission;
import com.avic.management.models.OrderRefoundBean;
import com.avic.management.services.OrderRefoundService;
import com.avic.passport.models.User;

@Controller
@RequestMapping("/orderRefound")
public class OrderRefoundController {
    protected static final Log logger = LogFactory.getLog(OrderRefoundController.class);
    
    @Autowired
    OrderRefoundService orderRefoundService;
    
    @RequestMapping("")
    public String index(HttpServletRequest request,
    		HttpSession httpSession, Map<String, Object> map) {
        logger.info("订单-退货");
        
        try {
        	@SuppressWarnings("unused")
			User user = Permission.check(httpSession, UserRole.BUY);
        } catch (Exception e) {
            return "redirect:/passport/login";
        }
        
        String order_id = request.getParameter("o");
        if (StringUtils.isEmpty(order_id)) {
            throw new PageNotFoundException();
        }
        
//      获取要退货单基本信息
        OrderRefoundBean order = orderRefoundService.getOrderDetail(order_id);
        if (order_id == null) {
            throw new PageNotFoundException();
        }
        
        String sup_id = order.getSup_id();
        map.put("order", order);
        request.setAttribute("order_id", order_id);
        request.setAttribute("sup_id", sup_id);
        return "management_order_refound";
    }
    
    @RequestMapping("/orderSelect")
    public String orderSelectDoInit(@ModelAttribute("order") OrderRefoundBean query_items,
    		HttpServletRequest request, Map<String, Object> map) {
        logger.info("订单-退货-选择商品");
        
        OrderRefoundBean oeBean = new OrderRefoundBean();
//      订单编号
        String order_id = request.getParameter("o");
        if(order_id ==null || "".equals(order_id)){//为空说明是页面查询，否则为跳转查询
        	order_id = query_items.getOrder_id();
        }
        String goods_name = query_items.getGoods_name();
        
        if (StringUtils.isEmpty(order_id)) {
            throw new PageNotFoundException();
        }
        
        oeBean.setOrder_id(order_id);
        oeBean.setGoods_name(goods_name);
        
//      获取订单商品列表
        List<OrderRefoundBean> orderGoodsList = orderRefoundService.orderSelectDoInit(oeBean);
        if (orderGoodsList == null) {
            throw new PageNotFoundException();
        }
        
        map.put("oglist", orderGoodsList);
        request.setAttribute("goods_name", goods_name);
        request.setAttribute("order_id", order_id);
        return "management_order_select";
    }
    
    @RequestMapping("/orderSelectMain")
    @ResponseBody
    public Object orderSelectMainDoInit(@RequestParam("order_id")String order_id, 
    	@RequestParam("sup_goods_id")String sup_goods_id){
    	logger.info("订单-退货-主页面回显商品信息");
    	
    	OrderRefoundBean oeBean = new OrderRefoundBean();
//      订单编号
    	if (StringUtils.isEmpty(order_id)) {
    		throw new PageNotFoundException();
    	}
    	
    	oeBean.setOrder_id(order_id);
    	oeBean.setSup_goods_id(sup_goods_id);
    	
//      获取订单商品列表
    	List<OrderRefoundBean> orderGoodsList = orderRefoundService.orderSelectMainDoInit(oeBean);
    	if (orderGoodsList == null) {
    		throw new PageNotFoundException();
    	}
    	
    	return orderGoodsList;
    }
    
    @RequestMapping(value = "/doSave", method ={RequestMethod.POST})
    @ResponseBody
    public Object doSave(HttpSession httpSession,
    		@RequestBody List<OrderRefoundBean> oeBeanList,
    		@RequestParam("order_id")String order_id,
    		@RequestParam("sup_id")String sup_id,
    		@RequestParam("remark")String remark,
    		@RequestParam("refound_amount")String refound_amount,
    		@RequestParam("refound_price")String refound_price,
    		@RequestParam("imgCount")String imgCount,
    		@RequestParam("imgPaths")String imgPaths)
            throws Exception{
    	User user = null;
    	try {
			user = Permission.check(httpSession, UserRole.BUY);
        } catch (Exception e) {
            return "redirect:/passport/login";
        }
        String user_id = user.getUserId();
    	String result = "ok";
    	Map<String, String> map = new HashMap<String, String>();
    	Map<String, String> paramMap = new HashMap<String, String>();
    	paramMap.put("order_id", order_id);
    	paramMap.put("sup_id", sup_id);
    	paramMap.put("remark", remark);
    	paramMap.put("refound_amount", refound_amount);
    	paramMap.put("refound_price", refound_price);
    	paramMap.put("user_id", user_id);
    	paramMap.put("imgCount", imgCount);
    	paramMap.put("imgPaths", imgPaths);
        result = orderRefoundService.doSaveInTables(oeBeanList,paramMap);
        map.put("result", result);
        return map;
    }
}