package com.avic.market.cpi;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.avic.market.cpi.exceptions.NoSuchSupplierException;
import com.avic.market.cpi.exceptions.ServiceExecutionFailedException;
import com.avic.market.cpi.exceptions.TokenInvalidException;
import com.avic.market.mappers.CategoryMapper;
import com.avic.market.mappers.GoodsMapper;
import com.avic.market.mappers.SupplierMapper;
import com.avic.market.models.Goods;
import com.avic.market.models.Price;
import com.avic.market.models.SupArea;
import com.avic.market.models.SupCategory;
import com.avic.market.models.Supplier;

@Component
public class CpiService {
    protected static final Log logger = LogFactory.getLog(CpiService.class);
    private Map<Integer, ServiceAdapter> adapters = new HashMap<Integer, ServiceAdapter>();

    @Autowired
    SupplierMapper supplierMapper;
    
    @Autowired
    CategoryMapper categoryMapper;
    
    @Autowired
    GoodsMapper goodsMapper;
    
    public ServiceAdapter getServiceAdapter(int supId) {
        return adapters.get(supId);
    }
    
    @PostConstruct
    public void init() {
        logger.info("CpiService 加载 ...");
        
        try {
            List<Supplier> sups = supplierMapper.querySupplierList();
            
            if (sups == null || sups.size() == 0) {
                logger.error("系统无供应商数据");
                return;
            }
            
            for (Supplier s : sups) {
                logger.info("开始加载供应商服务 [ID:" + s.getSupId() + " CODE:" + s.getSupCode() + "]...");
                Class<?> clazz = Class.forName("com.avic.market.cpi.adapters." + s.getSupCode().substring(0, 1).toUpperCase() + s.getSupCode().substring(1) + "ServiceAdapter");
                
                if (ServiceAdapter.class.isAssignableFrom(clazz)) {
                    ServiceAdapter adapter = (ServiceAdapter)clazz.newInstance();
                    adapter.setSupplier(s);
                    adapters.put(s.getSupId(), adapter);
                    adapter.init();
                    
                    syncToken(adapter);
           
                } else {
                    throw new Exception("供应商服务不存在 [ID:" + s.getSupId() + " CODE:" + s.getSupCode() + "]");
                }
                logger.info("加载供应商成功 [ID:" + s.getSupId() + " CODE:" + s.getSupCode() + "]");
                
            }
        } catch (Exception e) {
            logger.error("加载供应商异常", e);
        }
        
        logger.info("CpiService 加载完成，供应商数量 [" + adapters.size() + "]");
    }
    
    private synchronized void syncToken(ServiceAdapter adapter) {
        if (!adapter.isTokenValid()) {
            logger.info("供应商服务 [" + adapter.getSupplier().getSupCode() + "] token 无效, 刷新 ...");
            try {
                adapter.fetchToken();
            } catch (ServiceExecutionFailedException e) {
                logger.error("供应商服务 [" + adapter.getSupplier().getSupCode() + "] token 刷新失败", e);
                return;
            }
            logger.info("供应商服务 [" + adapter.getSupplier().getSupCode() + "] token 已刷新 [access:" + adapter.getSupplier().getAccessToken() + " refresh:" + adapter.getSupplier().getRefreshToken() + "]");
            supplierMapper.updateSupplierToken(adapter.getSupplier());   
        }      
    }
    
    public List<SupCategory> getCategory(int supId) throws NoSuchSupplierException, ServiceExecutionFailedException {
        if (!adapters.containsKey(supId)) {
            throw new NoSuchSupplierException("供应商不存在 [" + supId + "]");
        }
        ServiceAdapter adapter = adapters.get(supId);
        try {
            return adapter.fetchCategory();
        } catch (TokenInvalidException e) {
            logger.warn("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载分类失败 [token invalid]");
            adapter.invalidToken();
            syncToken(adapter);
            try {
                logger.info("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 重新加载分类");
                return adapter.fetchCategory();
            } catch (TokenInvalidException e1) {
                logger.error("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载分类异常", e1);
                throw new ServiceExecutionFailedException("加载分类刷新token后重试仍然异常", e1);
            }
        }
    }
    
    public void syncGoods() {
        logger.info("CpiService 同步商品数据, [" + adapters.size() + "] 供应商需要同步");
        List<SupCategory> cats = null;
        for (ServiceAdapter i : adapters.values()) {
            logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 开始同步分类");
            try {
               cats = i.fetchCategory();
            } catch (TokenInvalidException e) {
                logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 加载分类失败 [token invalid]");
                i.invalidToken();
                syncToken(i);
                try {
                    logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 重新加载分类");
                    // 有供应商是分类，有供应商是商品池
                    cats = i.fetchCategory();
                } catch (Exception e1) {
                    logger.error("供应商服务 [" + i.getSupplier().getSupCode() + "] 加载分类刷新token后重试仍然异常.", e1);
                }
            } catch (ServiceExecutionFailedException e) {
                logger.error("供应商服务 [" + i.getSupplier().getSupCode() + "] 加载分类异常", e);
            }
            if (cats != null) {
                /* 分类直接提供数据，这里不再同步
                logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 分类准备写入数据库，数量[" + cats.size() + "]");
                categoryMapper.deleteAllSupCat(i.getSupplier().getSupId());
                categoryMapper.batchInsertSupCat(cats);
                logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 分类写入完成");
                */
                logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 开始同步商品");
                List<String> skus = null;
                Map<String, Price> price = null;
                for (SupCategory c : cats) {
                    int count = 0;
                    logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 同步商品，分类 [" + c.getSupCatName() + "]");
                    try {
                        skus = i.fetchSku(c.getSupCatId());
                    } catch (Exception e) {
                         logger.error("供应商服务 [" + i.getSupplier().getSupCode() + "] 加载SKU异常 分类 [" + c.getSupCatName() + "]", e);
                         continue;
                    }
                    

                    try {
                        logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 获取价格 分类 [" + c.getSupCatName() + "] SKU [" + skus + "]");
                        price = i.fetchPrice(skus);
                    } catch (Exception e) {
                        logger.error("供应商服务 [" + i.getSupplier().getSupCode() + "] 获取价格异常 分类 [" + c.getSupCatName() + "] SKU [" + skus + "]", e);
                        continue;
                    }

                    logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 分类 [" + c.getSupCatName() + "] SKU数量 [" + skus.size() + "]");
                    goodsMapper.deleteSupCatGoods(i.getSupplier().getSupId(), c.getSupCatId());
                    for (String s : skus) {
                        logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 获取并保存商品信息 分类 [" + c.getSupCatName() + "] SKU [" + s + "]");
                        try {
                            Goods g = i.fetchGoods(s, c.getSupCatId());
                            Price p = price.get(g.getSupGoodsId());
                            g.setAgreePrice(p.getAgreePrice());
                            g.setCountPrice(p.getCountPrice());
                            g.setSalePrice(p.getSalePrice());
                            //g.setSupCatId(c.getSupCatId());
                            // 统一为池编号，分类编号放在adapter内部处理
                            g.setPoolId(c.getSupCatId());
                            goodsMapper.insertSupGoods(g);
                            count++;
                                
                        } catch (Exception e) {
                            logger.error("供应商服务 [" + i.getSupplier().getSupCode() + "] 获取并保存商品异常 分类 [" + c.getSupCatName() + "] SKU [" + s + "]", e);
                            continue;
                        }
                    }
                    logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 分类 [" + c.getSupCatName() + "] 商品同步完成 成功数量 [" + count + "] 失败数量 [" + (skus.size() - count) + "]");
                    
                }
                cats = null;
            }
            logger.info("供应商服务 [" + i.getSupplier().getSupCode() + "] 商品同步完成");
            
        }

        logger.info("CpiService 清除品牌对应关系");
        categoryMapper.deleteCatBrand();
        logger.info("CpiService 生成品牌对应关系");
        categoryMapper.insertCatBrand();
        
        
    }
    
    public List<SupArea> getProvince(int supId) throws NoSuchSupplierException, ServiceExecutionFailedException {
        if (!adapters.containsKey(supId)) {
            throw new NoSuchSupplierException("供应商不存在 [" + supId + "]");
        }
        
        ServiceAdapter adapter = adapters.get(supId);
        try {
            return adapter.fetchProvince();
        } catch (TokenInvalidException e) {
            logger.warn("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载省份失败 [token invalid]");
            adapter.invalidToken();
            syncToken(adapter);
            try {
                logger.info("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 重新加载省份");
                return adapter.fetchProvince();
            } catch (TokenInvalidException e1) {
                logger.error("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载省份异常", e1);
                throw new ServiceExecutionFailedException("加载省份刷新token后重试仍然异常", e1);
            }
        }
    }
    
    public List<SupArea> getCity(int supId, int prov) throws NoSuchSupplierException, ServiceExecutionFailedException {
        if (!adapters.containsKey(supId)) {
            throw new NoSuchSupplierException("供应商不存在 [" + supId + "]");
        }
        
        ServiceAdapter adapter = adapters.get(supId);
        try {
            return adapter.fetchCity(prov);
        } catch (TokenInvalidException e) {
            logger.warn("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载城市失败 [token invalid]");
            adapter.invalidToken();
            syncToken(adapter);
            try {
                logger.info("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 重新加载城市");
                return adapter.fetchCity(prov);
            } catch (TokenInvalidException e1) {
                logger.error("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载城市异常", e1);
                throw new ServiceExecutionFailedException("加载城市刷新token后重试仍然异常", e1);
            }
        }
    }
    
    public List<SupArea> getCountry(int supId, int city) throws NoSuchSupplierException, ServiceExecutionFailedException {
        if (!adapters.containsKey(supId)) {
            throw new NoSuchSupplierException("供应商不存在 [" + supId + "]");
        }
        
        ServiceAdapter adapter = adapters.get(supId);
        try {
            return adapter.fetchCountry(city);
        } catch (TokenInvalidException e) {
            logger.warn("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载区县失败 [token invalid]");
            adapter.invalidToken();
            syncToken(adapter);
            try {
                logger.info("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 重新加载区县");
                return adapter.fetchCountry(city);
            } catch (TokenInvalidException e1) {
                logger.error("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载区县异常", e1);
                throw new ServiceExecutionFailedException("加载区县刷新token后重试仍然异常", e1);
            }
        }
    }
    
    public List<SupArea> getTown(int supId, int country) throws NoSuchSupplierException, ServiceExecutionFailedException {
        if (!adapters.containsKey(supId)) {
            throw new NoSuchSupplierException("供应商不存在 [" + supId + "]");
        }
        
        ServiceAdapter adapter = adapters.get(supId);
        try {
            return adapter.fetchTown(country);
        } catch (TokenInvalidException e) {
            logger.warn("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载乡镇失败 [token invalid]");
            adapter.invalidToken();
            syncToken(adapter);
            try {
                logger.info("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 重新加载乡镇");
                return adapter.fetchTown(country);
            } catch (TokenInvalidException e1) {
                logger.error("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载乡镇异常", e1);
                throw new ServiceExecutionFailedException("加载乡镇刷新token后重试仍然异常", e1);
            }
        }
    }
    
    public List<String> getSku(int supId, int cat) throws NoSuchSupplierException, ServiceExecutionFailedException {
        if (!adapters.containsKey(supId)) {
            throw new NoSuchSupplierException("供应商不存在 [" + supId + "]");
        }
        
        ServiceAdapter adapter = adapters.get(supId);
        try {
            return adapter.fetchSku(cat);
        } catch (TokenInvalidException e) {
            logger.warn("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载SKU失败 [token invalid]");
            adapter.invalidToken();
            syncToken(adapter);
            try {
                logger.info("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 重新加载SKU");
                return adapter.fetchSku(cat);
            } catch (TokenInvalidException e1) {
                logger.error("供应商服务 [" + adapter.getSupplier().getSupCode() + "] 加载SKU异常", e1);
                throw new ServiceExecutionFailedException("加载SKU刷新token后重试仍然异常", e1);
            }
        }
    }
    
    
    
}
