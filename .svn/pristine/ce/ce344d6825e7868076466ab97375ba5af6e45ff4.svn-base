package com.avic.supervise.controllers;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.avic.common.utils.ConfigHolder;
import com.avic.passport.models.User;
import com.avic.supervise.models.Brand;
import com.avic.supervise.services.BrandService;

@Controller
@RequestMapping("/brand")
public class BrandController {
    protected static final Log logger = LogFactory.getLog(BrandController.class);
    
    static final int PAGE_SIZE = 10; //每页显示多少条
    @Autowired
    BrandService brandService;
    
    @SuppressWarnings("unused")
	@RequestMapping("")
    public String index(@ModelAttribute("brand") Brand brand,
    		HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
        logger.info("品牌推荐");
        User user = new User();
        /*try {
        	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}*/
		String page = req.getParameter("page");
		
		int pageNum = 1;
		 
        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }
        //查询数量
        int total = brandService.queryBrandCount(brand);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);
        
        if (pageNum > pages) {
            pageNum = pages;
        }
        List<Brand> brandList = new ArrayList<Brand>();
        brand.setPage(pageNum);
        brand.setPageSize(PAGE_SIZE);
        brandList = brandService.queryBrand(brand);
        
        map.put("brands", brandList);
        map.put("searchBrand", brand);
        map.put("page", pageNum);
        map.put("total", total);
        map.put("pages", pages);
        map.put("pageAction","brand/brand_recommend?page=%PAGE%");
        return "/business/brand/brand_recommend";
    }
    
    /**
     * 取消推荐品牌 
     */
    @RequestMapping("/cancleBrand/{bid}")
    public String cancleBrand(@PathVariable("bid") String bid,
    		HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
        logger.info("取消品牌推荐");
        Brand bd = new Brand();
        bd.setBid(bid);
        brandService.setIfRecommend(bd);
        return "redirect:/supervise/brand";
    }
    
    /**
     * 跳转设置品牌推荐页面
     */
    @RequestMapping("/setBrandPage")
    public String setBrandPage(HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
        logger.info("设置品牌推荐");
        Brand bd = new Brand();
        bd.setBrand_name(req.getParameter("brand_name"));
        Brand brand = new Brand();
        brand = brandService.getBrandInfoByBid(bd);
        if(brand==null){
        	brand = new Brand();
        	brand.setBrand_name(req.getParameter("brand_name"));
        }
        map.put("brand", brand);
        return "/business/brand/brand_recommend_form";
    }
    
    /**
     * 设置推荐品牌 
     */
    @RequestMapping("/setBrand")
    @ResponseBody
    public String setRecommend(@ModelAttribute("brand")Brand brand,
    		HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
        logger.info("设置品牌推荐");
		//修改品牌推荐时间信息
        brandService.updateBrandInfoDate(brand);
        int count = brandService.getBrandInfoExtByBid(brand);
		//判断是否有品牌扩展信息
        if(count>0){
        	//有 删除之前图片  修改扩展图片信息
        	String sPath = brandService.getBrandInfoExtImgPath(brand);
        	deleteFile(sPath);
        	brandService.updateBrandExtPic(brand);
        }else{
        	//没有 添加品牌扩展信息
        	brandService.addBrandInfoExt(brand);
        }
		        	
		        	
        return "success";
    }
    
    
    @RequestMapping("/uploadPic")
    @ResponseBody  
    public Object uploadPic(@RequestParam(value = "file", required = false) MultipartFile file,
    		HttpServletRequest request,HttpSession httpSession) throws Exception {
    	String path = request.getSession().getServletContext().getRealPath(ConfigHolder.getInstance().getConfig("brand_url"));  
        String fileName = file.getOriginalFilename();
        String suffix = "";
        int dot = fileName.lastIndexOf('.'); 
        if ((dot >-1) && (dot < (fileName.length()))) { 
        	suffix = fileName.substring(dot); 
        }
//        String fileNameStr = (new Date().getTime())+fileName;  
        String fileNameStr = new Date().getTime()+suffix;
        File targetFile = new File(path, fileNameStr);  
        if(!targetFile.exists()){  
            targetFile.mkdirs();  
        }  
        //保存  
        try {  
            file.transferTo(targetFile);  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        
        return ConfigHolder.getInstance().getConfig("brand_url") + "/" +fileNameStr;  
    }  

    @RequestMapping("/deletePic")  
    @ResponseBody  
    public Object uploadPic(@RequestParam("fileName")String fileName,
    		HttpServletRequest request,HttpSession httpSession) throws Exception {  
    	Map<String, String> result = new HashMap<String, String>();
    	result.put("status", "success");
    	String path = request.getSession().getServletContext().getRealPath(ConfigHolder.getInstance().getConfig("brand_url"));  
        String sPath = path+ File.separator + fileName;
        try{
        	this.deleteFile(sPath);
        }catch (Exception e) {
        	result.put("status", "fail");
		}
        return result;
    }
    
    /**
     * 删除单个文件
     * 
     * @param sPath
     *            被删除文件的路径+文件名
     * @return 单个文件删除成功返回true，否则返回false
     */
    public boolean deleteFile(String sPath) {
        Boolean flag = false;
        File file = new File(sPath);
        // 路径为文件且不为空则进行删除
        if (file.isFile() && file.exists()) {
            file.delete();
            flag = true;
        }
        return flag;
    }
}