package com.avic.supervise.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.avic.common.constants.UserRole;
import com.avic.common.exceptions.NoPermissionException;
import com.avic.common.exceptions.UserNotLoginException;
import com.avic.common.utils.Permission;
import com.avic.management.models.Audit;
import com.avic.management.services.CommonService;
import com.avic.passport.models.User;
import com.avic.supervise.models.SupplierRecommend;
import com.avic.supervise.services.SupplierRecommendService;

@Controller
@RequestMapping("/supplierReommend")
public class SupplierRecommendController {
    protected static final Log logger = LogFactory.getLog(SupplierRecommendController.class);
    static final int PAGE_SIZE = 10; //每页显示多少条
    @Autowired
    SupplierRecommendService supplierRecommendService;
    
    @SuppressWarnings("unused")
	@RequestMapping("")
    public String index(@ModelAttribute("supplierRecommend") SupplierRecommend supplierRecommend,HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
        logger.info("供应商推荐");
        User user = new User();
        /*try {
        	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}*/
		String page = req.getParameter("page");
		
		int pageNum = 1;
		 
        if (StringUtils.isNumeric(page)) {
            pageNum = Integer.parseInt(page);
        }
        //查询数量
        int total = supplierRecommendService.querySupplierRecommendsCount(supplierRecommend);

        int pages = (int) Math.ceil((double) total / PAGE_SIZE);
        
        if (pageNum > pages) {
            pageNum = pages;
        }
        List<SupplierRecommend> supplierRecommends = new ArrayList<SupplierRecommend>();
        supplierRecommend.setPage(pageNum);
        supplierRecommend.setPageSize(PAGE_SIZE);
        supplierRecommends = supplierRecommendService.querySupplierRecommends(supplierRecommend);
        
        map.put("supplierRecommends", supplierRecommends);
        map.put("searchSupplierRecommend", supplierRecommend);
        map.put("page", pageNum);
        map.put("total", total);
        map.put("pages", pages);
        map.put("pageAction","supplier/supplierReommend?page=%PAGE%");
        return "business/suppliser/supplier_recommend";
    }
    
    /**
     * 取消推荐供应商 
     */
    @RequestMapping("/cancleRecommend/{supID}")
    public String cancleRecommend(@PathVariable("supID") String supID,HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
        logger.info("取消供应商推荐");
        User user = new User();
        /*try {
        	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}*/
        
        SupplierRecommend sr = new SupplierRecommend();
        sr.setSupID(supID);
        supplierRecommendService.setIfRecommend(sr);
        return "redirect:/supervise/supplierReommend";
    }
    
    /**
     * 跳转设置供应商推荐页面
     */
    @RequestMapping("/setRecommendPage/{supID}")
    public String setRecommendPage(@PathVariable("supID") String supID,HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
        logger.info("设置供应商推荐");
        User user = new User();
        /*try {
        	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}*/
        
        SupplierRecommend sr = new SupplierRecommend();
        sr.setSupID(supID);
        sr = supplierRecommendService.getSupInfoBySupID(sr);
        map.put("supplierRecommend", sr);
        return "business/suppliser/supplier_recommend_form";
    }
    
    /**
     * 设置推荐供应商 
     */
    @RequestMapping("/setRecommend")
    public String setRecommend(@ModelAttribute("supplierRecommend")SupplierRecommend supplierRecommend,HttpServletRequest req,Map<String, Object> map,HttpSession httpSession) {
        logger.info("设置供应商推荐");
        User user = new User();
        /*try {
        	user = Permission.check(httpSession, UserRole.BUY,UserRole.CLIENT);
		} catch (UserNotLoginException e) {
			return "redirect:/passport/login";
		} catch (NoPermissionException e){
			return "redirect:/passport/login";
		}*/
        
        return "business/suppliser/supplier_recommend_form";
    }
}
