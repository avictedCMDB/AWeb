package com.avic.market.controllers;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.avic.common.beans.ResultObject;
import com.avic.common.constants.SessionKeys;
import com.avic.common.constants.UserRole;
import com.avic.common.exceptions.PageNotFoundException;
import com.avic.common.utils.ConfigHolder;
import com.avic.common.utils.Permission;
import com.avic.market.cpi.CpiService;
import com.avic.market.cpi.exceptions.NoSuchSupplierException;
import com.avic.market.cpi.exceptions.ServiceExecutionFailedException;
import com.avic.market.models.Address;
import com.avic.market.models.CartItem;
import com.avic.market.models.Goods;
import com.avic.market.models.Invoice;
import com.avic.market.models.Order;
import com.avic.market.models.OrderSnapshot;
import com.avic.market.models.PayFlow;
import com.avic.market.models.Price;
import com.avic.market.models.SettleData;
import com.avic.market.models.VatInfo;
import com.avic.market.services.AddressService;
import com.avic.market.services.CartService;
import com.avic.market.services.GoodsService;
import com.avic.market.services.InvoiceService;
import com.avic.market.services.OrderService;
import com.avic.market.services.PayFlowService;
import com.avic.market.services.SettleService;
import com.avic.passport.models.User;
import com.chinapay.secss.SecssUtil;

@Controller
@RequestMapping("/order")
public class OrderController {
    protected static final Log logger = LogFactory.getLog(OrderController.class);
    
    @Autowired
    OrderService orderService;
    
    @Autowired
    CpiService cpiService;
    
    @Autowired
    AddressService addressService;
    
    @Autowired
    GoodsService goodsService;
    
    @Autowired
    CartService cartService;
    
    @Autowired
    InvoiceService invoiceService;
    
    @Autowired
    ConfigHolder configHolder;
    
    @Autowired
    PayFlowService payFlowService;
    
    @Autowired
    SettleService settleService;
    
    @RequestMapping("/confirm")
    public String confirm(HttpServletRequest req, HttpSession session, Map<String, Object> map) {
        User user = Permission.check(session, UserRole.BUY, UserRole.CLIENT);
        // 编号：supId_supGoodsId_num, ...
        String ids = req.getParameter("ids");
        String type = req.getParameter("type");
        logger.info("生成订单Controller-ids["+ids+"],type["+type+"]");

        if (StringUtils.isEmpty(ids)) {
            logger.info("生成订单Controller-参数无效-ids["+ids+"],type["+type+"]");
            map.put("error", "参数无效");
            return "forward:/market/cart/list";
        }
        
        if (StringUtils.isEmpty(type)) {
            type = "0";
        }
        
        int supId = 0;
        
        Map<String, Integer> skuNum = new HashMap<String, Integer>();
        
        List<String> errors = new ArrayList<String>();
        
        for (String i : ids.split(",")) {
            String[] seg = i.split("_");
            if (seg.length != 3 || !StringUtils.isNumeric(seg[0]) || !StringUtils.isNumeric(seg[2])) {
                logger.info("生成订单Controller-参数无效-ids["+ids+"]");
                return "forward:/market/cart/list";
            }
            
            if (supId == 0) {
                supId = Integer.parseInt(seg[0]);
            } else if (supId != Integer.parseInt(seg[0])) {
                map.put("error", "请选择同一个供应商的商品下单");
                return "forward:/market/cart/list";
            }
            
            skuNum.put(seg[1], Integer.parseInt(seg[2]));
        }
        
        List<String> skus = new ArrayList<String>(skuNum.keySet());
        
        List<CartItem> goods = cartService.getCartGoodsByIds(user.getUserId(), supId, skus);
        logger.info("生成订单-状态校验");

        Map<String, Integer> status = null;
        try {
            status = cpiService.getGoodsStatus(supId, skus);
        } catch (Exception e) {
            logger.info("生成订单-状态校验异常");
            map.put("error", "供应商连接异常，无法获得商品状态信息");
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }


        for (CartItem i : goods) {
            if (status.get(i.getSupGoodsId()) != 1) {
                errors.add("商品【"+i.getGoodsName()+"】已下架");
                goodsService.updateGoodsStatus(supId, i.getSupGoodsId(), 0);
            }
            
            // 加入数量
            i.setBuyNum(skuNum.get(i.getSupGoodsId()));
        }
        
        if (errors.size() > 0) {
            logger.info("生成订单-状态校验失败");
            map.put("error", "下单失败：\\n" + StringUtils.join(errors, "\\n"));
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }
        
        logger.info("生成订单-库存校验");
        

        Address addr = addressService.getDefaultAddress(user.getUserId(), supId);
        List<String> area = null;
        if (addr != null) {
            area = new ArrayList<String>();
            area.add(addr.getAreaLevelOne());
            area.add(addr.getAreaLevelTwo());
            area.add(addr.getAreaLevelThree());
            if (!StringUtils.isEmpty(addr.getAreaLevelFour())) {
                area.add(addr.getAreaLevelFour());
            }
        }
        Map<String, Integer> stocks = null;
        try {
            stocks = cpiService.getGoodsStock(supId, skus, area);
        } catch (Exception e) {
            logger.info("生成订单-库存校验失败");
            map.put("error", "供应商连接异常，无法获得库存信息");
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }
        
        for (CartItem i : goods) {
            if (stocks.get(i.getSupGoodsId()) == null || i.getBuyNum() > stocks.get(i.getSupGoodsId())) {
                errors.add("商品【"+i.getGoodsName()+"】库存不足");
            } else if (i.getCompare() < 1) {
                errors.add("商品【"+i.getGoodsName()+"】未对比");
            }
        }
        
        if (errors.size() > 0) {
            logger.info("生成订单-库存校验失败");
            map.put("error", "下单失败：\\n" + StringUtils.join(errors, "\\n"));
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }
        
        logger.info("生成订单-价格校验");

        Map<String, Price> prices = null;
        try {
            prices = cpiService.getGoodsPrice(supId, skus);
        } catch (Exception e) {
            logger.info("生成订单-价格校验异常");
            map.put("error", "供应商连接异常，无法获得商品价格信息");
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }


        for (CartItem i : goods) {
            Price p = prices.get(i.getSupGoodsId());
            if (p == null || p.getAgreePrice() != i.getAgreePrice()) {
                errors.add("商品【"+i.getGoodsName()+"】价格发生变化");
                p.setSupId(supId);
                p.setSupGoodsId(i.getSupGoodsId());
                goodsService.updateGoodsPrice(p);
            }
        }
        
        if (errors.size() > 0) {
            logger.info("生成订单-价格校验失败");
            map.put("error", "下单失败：\\n" + StringUtils.join(errors, "\\n"));
            if ("1".equals(type)) {
                return "forward:/market/goods/show?sid=" + supId + "&gid=" + skus.get(0);
            } else {
                return "forward:/market/cart/list";
            }
        }
        VatInfo vat = invoiceService.getUserVat(user.getUserId());
        map.put("address", addressService.getUserAddress(user.getUserId(), supId));
        map.put("invoice", invoiceService.getDefaultUserInvoice(user.getUserId()));
        map.put("vat", vat);
        map.put("goods", goods);
        map.put("supId", supId);
        map.put("ids", ids);
        map.put("prov", addressService.getSupArea(supId, 0));
        map.put("vatProv", addressService.getSupArea(1, 0));
        if (vat != null && vat.getVatReceiveProv() > 0) {
            map.put("vatCity", addressService.getSupArea(1, vat.getVatReceiveProv()));
        }
        if (vat != null && vat.getVatReceiveCity() > 0) {
            map.put("vatDist", addressService.getSupArea(1, vat.getVatReceiveCity()));
        }
        
        return "order/order";
    }
    
    @RequestMapping("/area")
    @ResponseBody
    public ResultObject area(HttpServletRequest req) {
        // 上级区域
        String parent = req.getParameter("parent");
        // 供应商编号
        String supId = req.getParameter("supId");
        logger.info("获取区域Controller-parent["+parent+"]， supId["+supId+"]");

        if (!StringUtils.isNumeric(supId) || !StringUtils.isNumeric(parent)) {
            logger.info("获取区域Controller-参数无效-parent["+parent+"]， supId["+supId+"]");

            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        return new ResultObject(ResultObject.OK, addressService.getSupArea(Integer.parseInt(supId), Integer.parseInt(parent)));
        
    }
    
    @RequestMapping("/address")
    @ResponseBody
    public ResultObject address(HttpServletRequest req, HttpSession session) {
        User user = Permission.check(session, UserRole.BUY, UserRole.CLIENT);
        // 省
        String prov = req.getParameter("prov");
        // 市
        String city = req.getParameter("city");
        // 县
        String dist = req.getParameter("dist");
        // 镇
        String town = req.getParameter("town");
        // 详细
        String detail = req.getParameter("detail");
        // 收货人
        String name = req.getParameter("name");
        // 邮编
        String zip = req.getParameter("zip");
        // 手机
        String phone = req.getParameter("phone");
        // 电话
        String tel = req.getParameter("tel");
        // 邮箱
        String email = req.getParameter("email");
        // 供应商编号
        String supId = req.getParameter("supId");
        // 别名
        String alias = req.getParameter("alias");

        logger.info("添加地址Controller-alias["+alias+"], prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], detail["+detail+"], name["+name+"], zip["+zip+"], phone["+phone+"], tel["+tel+"], email["+email+"], supId["+supId+"]");

        if (StringUtils.isEmpty(prov)||StringUtils.isEmpty(city)||StringUtils.isEmpty(dist)||StringUtils.isEmpty(detail)||StringUtils.isEmpty(name)||StringUtils.isEmpty(email)) {

            logger.info("添加地址Controller-参数无效-prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], detail["+detail+"], name["+name+"], zip["+zip+"], phone["+phone+"], tel["+tel+"], email["+email+"], supId["+supId+"]");

            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        Address address = new Address();
        address.setAddressDetail(detail);
        address.setAreaLevelFour(town);
        address.setAreaLevelOne(prov);
        address.setAreaLevelThree(dist);
        address.setAreaLevelTwo(city);
        address.setName(name);
        address.setPhone(phone);
        address.setSupId(supId);
        address.setTel(tel);
        address.setEmail(email);
        address.setUserId(user.getUserId());
        address.setZipCode(zip);
        address.setAlias(alias);
        
        addressService.addAddress(address);
        
        return new ResultObject(ResultObject.OK, "添加成功");
    }
    
    @RequestMapping("/check")
    @ResponseBody
    public ResultObject check(HttpServletRequest req, HttpSession session) {
        User user = Permission.check(session, UserRole.BUY, UserRole.CLIENT);
        
        // 供应商编号 
        String supId = req.getParameter("supId");
        // 商品:gid#num,...
        String goods = req.getParameter("goods");
        // 省
        String prov = req.getParameter("prov");
        // 市
        String city = req.getParameter("city");
        // 区
        String dist = req.getParameter("dist");
        // 镇
        String town = req.getParameter("town");
        
        logger.info("生成订单-库存校验-prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], goods["+goods+"], supId["+supId+"]");

        
        if (!StringUtils.isNumeric(supId) || StringUtils.isEmpty(goods) || !StringUtils.isNumeric(prov) || !StringUtils.isNumeric(city) || !StringUtils.isNumeric(dist)) {
            logger.info("生成订单-参数无效-库存校验-prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], goods["+goods+"], supId["+supId+"]");
            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        Map<String, Integer> map = new HashMap<String, Integer>();
        
        try {
            for (String i : goods.split(",")) {
                map.put(i.split("_")[1], Integer.parseInt(i.split("_")[2]));
            }
        } catch (Exception e) {
            logger.info("生成订单-参数无效-库存校验-prov["+prov+"], city["+city+"], dist["+dist+"], town["+town+"], goods["+goods+"], supId["+supId+"]");
            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        List<String> area = new ArrayList<String>();
        area.add(prov);
        area.add(city);
        area.add(dist);
        area.add(town == null ? "" : town);
        
        Map<String, Integer> stocks = null;
        try {
            stocks = cpiService.getGoodsStock(Integer.parseInt(supId), new ArrayList<String>(map.keySet()), area);
        } catch (Exception e) {
            logger.info("生成订单-库存校验失败");
            return new ResultObject(ResultObject.FAIL, "供应商连接异常，无法获得库存信息");
        }
        
        for (Entry<String, Integer> i : map.entrySet()) {
            if (stocks.get(i.getKey()) == null || i.getValue() > stocks.get(i.getKey())) {
                return new ResultObject(ResultObject.FAIL, "配送到所选地址的商品库存不足，请选择其他地址");
            }
        }
        
        
        return new ResultObject(ResultObject.OK, "");
    }
    
    @RequestMapping("/invoice")
    @ResponseBody
    public ResultObject invoice(HttpServletRequest req, HttpSession session) {
        User user = Permission.check(session, UserRole.BUY, UserRole.CLIENT);
        // 发票内容类型
        String flag = req.getParameter("flag");
        // 发票内容
        String content = req.getParameter("content");
        // 付款单位
        String company = req.getParameter("company");
        // 税务登记号
        String num = req.getParameter("num");

        logger.info("生成订单-添加发票-flag["+flag+"], content["+content+"], company["+company+"], num["+num+"]");

        if (!StringUtils.isNumeric(flag) || StringUtils.isEmpty(company)) {
            logger.info("生成订单-参数无效-添加发票-flag["+flag+"], content["+content+"], company["+company+"], num["+num+"]");
            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        Invoice invoice = new Invoice();
        invoice.setCompanyName(company);
        invoice.setInvoiceContent(content);
        invoice.setInvoiceFlag(flag);
        invoice.setInvoiceNum(num);
        invoice.setUserId(user.getUserId());
        

        invoiceService.addInvoice(invoice);
        return new ResultObject(ResultObject.OK, "添加成功");
        
    }

    @RequestMapping("/vat")
    @ResponseBody
    public ResultObject vat(HttpServletRequest req, HttpSession session) {
        User user = Permission.check(session, UserRole.BUY, UserRole.CLIENT);
        // 收票人姓名
        String name = req.getParameter("name");
        // 收票人手机
        String phone = req.getParameter("phone");
        // 省
        String prov = req.getParameter("prov");
        // 市
        String city = req.getParameter("city");
        // 区
        String dist = req.getParameter("dist");
        // 详细地址
        String addr = req.getParameter("addr");

        logger.info("生成订单-添加增票-name["+name+"], phone["+phone+"], prov["+prov+"], city["+city+"], dist["+dist+"], addr["+addr+"]");

        if (!StringUtils.isNumeric(prov) || StringUtils.isEmpty(name) || !StringUtils.isNumeric(city) ||!StringUtils.isNumeric(dist) ||StringUtils.isEmpty(phone) ||StringUtils.isEmpty(addr)) {
            logger.info("生成订单-参数无效-添加发票-name["+name+"], phone["+phone+"], prov["+prov+"], city["+city+"], dist["+dist+"], addr["+addr+"]");
            return new ResultObject(ResultObject.FAIL, "参数无效");
        }
        
        VatInfo vat = new VatInfo();
        vat.setVatReceiveCity(Integer.parseInt(city));
        vat.setVatReceiveDetail(addr);
        vat.setVatReceiveDist(Integer.parseInt(dist));
        vat.setVatReceiveName(name);
        vat.setVatReceiveProv(Integer.parseInt(prov));
        vat.setVatReceiveTel(phone);
        
        vat.setUserId(user.getUserId());
        

        invoiceService.updateVat(vat);
        return new ResultObject(ResultObject.OK, "添加成功");
        
    }
    
    @RequestMapping("/submit")
    public String submit(HttpServletRequest req, HttpSession session, Map<String, Object> map) {
        User user = Permission.check(session, UserRole.BUY, UserRole.CLIENT);
        // 编号：supId_supGoodsId_num, ...
        String ids = req.getParameter("ids");
        // 配送方式
        String expressType = req.getParameter("express_type");
        // 省
        String addrProv = req.getParameter("addr_prov");
        // 市
        String addrCity = req.getParameter("addr_city");
        // 区
        String addrDist = req.getParameter("addr_dist");
        // 镇
        String addrTown = req.getParameter("addr_town");
        // 详细
        String addrDetail = req.getParameter("addr_detail");
        // 姓名
        String addrName = req.getParameter("addr_name");
        // 邮编
        String addrZip = req.getParameter("addr_zip");
        // 手机号
        String addrPhone = req.getParameter("addr_phone");
        // 电话
        String addrTel = req.getParameter("addr_tel");
        // 邮箱
        String addrEmail = req.getParameter("addr_email");
        // 地址
        String addrAll = req.getParameter("addr_all");
        // 发票类型
        String invoiceType = req.getParameter("invoice_type");
        // 发票内容类型
        String invoiceFlag = req.getParameter("invoice_flag");
        // 发票内容明细
        String invoiceContent = req.getParameter("invoice_content");
        // 单位
        String invoiceCompany = req.getParameter("invoice_company");
        // 税号
        String invoiceNum = req.getParameter("invoice_num");
        // 决策理由
        String decideReason = req.getParameter("decide_reason");
        // 增票地址
        String vatReceiveName = req.getParameter("vat_receive_name");
        String vatReceiveTel = req.getParameter("vat_receive_tel");
        String vatReceiveProv = req.getParameter("vat_receive_prov");
        String vatReceiveCity = req.getParameter("vat_receive_city");
        String vatReceiveDist = req.getParameter("vat_receive_dist");
        String vatReceiveDetail = req.getParameter("vat_receive_detail");
        
        // 支付方式
        String payGate = req.getParameter("pay_gate");
        
        logger.info("生成订单-提交-ids["+ids+"], expressType["+expressType+"], addrProv["+addrProv+"], addrCity["+addrCity+"], addrDist["+addrDist+"], addrTown["+addrTown+"], addrDetail["+addrDetail+"],"
                + " addrName["+addrName+"], addrZip["+addrZip+"], addrPhone["+addrPhone+"], addrTel["+addrTel+"], addrEmail["+addrEmail+"], addrAll["+addrAll+"], invoiceType["+invoiceType+"], invoiceFlag["+invoiceFlag+"],"
                        + " invoiceContent["+invoiceContent+"], invoiceCompany["+invoiceCompany+"], invoiceNum["+invoiceNum+"], decideReason["+decideReason+"]"
                                + ", vatReceiveName["+vatReceiveName+"], vatReceiveTel["+vatReceiveTel+"], vatReceiveProv["+vatReceiveProv+"], vatReceiveCity["+vatReceiveCity+"], "
                                        + "vatReceiveDist["+vatReceiveDist+"], vatReceiveDetail["+vatReceiveDetail+"]");

        if (StringUtils.isEmpty(addrTown)) {
            addrTown = "0";
        }

        if (StringUtils.isEmpty(ids) || !StringUtils.isNumeric(expressType) || !StringUtils.isNumeric(addrProv) || !StringUtils.isNumeric(addrCity) || !StringUtils.isNumeric(addrDist) || !StringUtils.isNumeric(addrTown) || StringUtils.isEmpty(addrDetail) || StringUtils.isEmpty(addrName) || !StringUtils.isNumeric(invoiceType) )  {
            map.put("success", false);
            map.put("msg", "参数无效");
            return "order/success";
        }
        

        int supId = 0;
        
        Map<String, Integer> skuNum = new HashMap<String, Integer>();
        
        List<String> errors = new ArrayList<String>();
        
        for (String i : ids.split(",")) {
            String[] seg = i.split("_");
            if (seg.length != 3 || !StringUtils.isNumeric(seg[0]) || !StringUtils.isNumeric(seg[2])) {
                logger.info("生成订单-提交-参数无效-ids["+ids+"]");
                map.put("success", false);
                map.put("msg", "参数无效");
                return "order/success";
            }
            
            if (supId == 0) {
                supId = Integer.parseInt(seg[0]);
            }
            
            skuNum.put(seg[1], Integer.parseInt(seg[2]));
        }
        
        
        List<Goods> goods = goodsService.getGoodsListByIds(supId, new ArrayList<String>(skuNum.keySet()));
        
        List<OrderSnapshot> list = new ArrayList<OrderSnapshot>();
        
        double total = 0;
        
        String orderId = orderService.getOrderIndex();
        
        for (Goods i : goods) {
            OrderSnapshot s = new OrderSnapshot();
            s.setBuyNum(skuNum.get(i.getSupGoodsId()));
            s.setGoodsName(i.getGoodsName());
            s.setGoodsPrice(i.getAgreePrice());
            s.setImagePath(i.getImagePath());
            s.setSupGoodsId(i.getSupGoodsId());
            s.setSupId(i.getSupId());
            s.setOrderId(orderId);
            list.add(s);
            
            total += s.getBuyNum() * s.getGoodsPrice();
        }
        
        Order order = new Order();
        order.setAddrAll(addrAll);
        order.setAddrCity(Integer.parseInt(addrCity));
        order.setAddrDetail(addrDetail);
        order.setAddrDist(Integer.parseInt(addrDist));
        order.setAddrName(addrName);
        order.setAddrPhone(addrPhone);
        order.setAddrProv(Integer.parseInt(addrProv));
        order.setAddrTel(addrTel);
        order.setAddrTown(Integer.parseInt(addrTown));
        order.setAddrZip(addrZip);
        order.setDecideReason(decideReason);
        order.setExpressType(Integer.parseInt(expressType));
        order.setOrderAmount(total);
        order.setSupId(supId);
        order.setUserId(user.getUserId());
        order.setOrderId(orderId);
        order.setSnapshots(list);
        order.setAddrEmail(addrEmail);
        order.setCompanyId(user.getCompanyId());
        
        if (user.getAuthorities().contains(UserRole.CLIENT.value())) {
            order.setOrderStatus(15);
        } else {
            order.setOrderStatus(1);
        }
        
        

        order.setInvoiceType(Integer.parseInt(invoiceType));
        if ("2".equals(invoiceType)) {
            order.setInvoiceFlag(1);
            order.setVatReceiveCity(Integer.parseInt(vatReceiveCity));
            order.setVatReceiveDetail(vatReceiveDetail);
            order.setVatReceiveDist(Integer.parseInt(vatReceiveDist));
            order.setVatReceiveName(vatReceiveName);
            order.setVatReceiveProv(Integer.parseInt(vatReceiveProv));
            order.setVatReceiveTel(vatReceiveTel);
        } else {
            order.setInvoiceCompany(invoiceCompany);
            order.setInvoiceContent(invoiceContent);
            order.setInvoiceFlag(Integer.parseInt(invoiceFlag));
            order.setInvoiceNum(invoiceNum);
        }
        

        try {
            order.setSupOrderId(cpiService.orderSubmit(order.getSupId(), order));
        } catch (NoSuchSupplierException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        } catch (ServiceExecutionFailedException e) {
            logger.error("生成订单-提交失败", e);

            map.put("success", false);
            map.put("msg", e.getMessage());
            return "order/success";
        }
        
        try {
            orderService.addOrder(order);
            map.put("success", true);
            map.put("orderId", orderId);
        } catch (Exception e) {
            logger.error("生成订单-提交失败", e);
            map.put("success", false);
            map.put("msg", "订单生成失败");
            return "order/success";
        }
        
        try {
            logger.info("生成订单-提交-更新商品销量");
            for (OrderSnapshot i :list) {
                goodsService.updateGoodsSaleNum(i.getSupId(), i.getSupGoodsId(), i.getBuyNum());
            }
        } catch (Exception e) {
            logger.warn("生成订单-更新商品销量失败", e);
            // 不影响下单，忽略
        }

        
        try {
            logger.info("生成订单-提交-删除购物车商品");
            List<CartItem> items = new ArrayList<CartItem>();
            
            for (OrderSnapshot i :list) {
                CartItem c = new CartItem();
                c.setUserId(user.getUserId());
                c.setSupGoodsId(i.getSupGoodsId());
                c.setSupId(i.getSupId());
                items.add(c);
            }
            
            cartService.deleteCartGoods(items);
            

            int cartNum = cartService.countGoodsNum(user.getUserId());
            session.setAttribute(SessionKeys.CART_NUM, cartNum);
        } catch (Exception e) {
            logger.warn("生成订单--删除购物车商品失败", e);
            // 不影响下单，忽略
        }
        

        if (user.getAuthorities().contains(UserRole.CLIENT.value())) {

            if (!"0001".equals(payGate) && !"0002".equals(payGate) && !"0004".equals(payGate)) {
                payGate = "0001";
            }
            

            // 订单号D20+11随机
            String payFlowNo = order.getOrderId() + RandomStringUtils.random(11, "0123456789");

            Map<String, String> param = new HashMap<String, String>();

            param.put("Version", "20140728");
            param.put("MerId", configHolder.getConfig("chinapay.mer.id." + payGate));
            param.put("MerOrderNo", payFlowNo);
            String date = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
            param.put("TranDate", date.substring(0, 8));
            param.put("TranTime", date.substring(8));
            param.put("OrderAmt", String.valueOf((int) (order.getOrderAmount() * 100)));
            param.put("TranType", payGate);
            param.put("BusiType", "0001");
            param.put("MerPageUrl", configHolder.getConfig("chinapay.callback.page").replace("${module}", "market/order"));
            param.put("MerBgUrl", configHolder.getConfig("chinapay.callback.notify").replace("${module}", "market/order"));
            param.put("MerResv", order.getOrderId());

            SecssUtil s = new SecssUtil();
            Properties p = new Properties();  
            InputStream in = getClass().getClassLoader().getResourceAsStream("chinapay" + payGate + ".properties");
            try {
                p.load(in);
                in.close();  
            } catch (IOException e1) {
                e1.printStackTrace();
            }  
            s.init(p);
            s.sign(param);
            param.put("Signature", s.getSign());

            PayFlow payFlow = new PayFlow();
            payFlow.setOrderId(order.getOrderId());
            payFlow.setPayAmount(order.getOrderAmount());
            payFlow.setPayFlow(payFlowNo);
            payFlow.setPayStatus(0);
            payFlow.setPayType(1);
            payFlow.setProcStatus(0);
            payFlow.setRemark("发起订单支付");
            payFlow.setPayGate(payGate);
            try {
                payFlow.setReqParam(new ObjectMapper().writeValueAsString(param));
            } catch (Exception e) {
            }

            payFlowService.insertPayFlow(payFlow);

            map.put("error", "");
            map.put("form", param);
            map.put("action", configHolder.getConfig("chinapay.url.pay"));

            return "order/pay";
        } else {            
            return "order/success";
        }
    }
    

    @RequestMapping("/callback/{type:.*}")
    public String callback(@PathVariable("type") String type, HttpServletRequest request, HttpServletResponse response, Map<String, Object> map) {
        try {
            request.setCharacterEncoding("utf-8");
        } catch (UnsupportedEncodingException e) {
        }
        //response.setCharacterEncoding("utf-8");

        Enumeration<String> requestNames = request.getParameterNames();
        Map<String, String> resultMap = new HashMap<String, String>();
        while (requestNames.hasMoreElements()) {
            String name = requestNames.nextElement();
            String value = request.getParameter(name);
            if ("page".equals(type)) {
                resultMap.put(name, value);
            } else {
                try {
                    resultMap.put(name, URLDecoder.decode(value, "UTF-8"));
                } catch (UnsupportedEncodingException e) {
                }
            }
        }

        SecssUtil s = new SecssUtil();
        s.init();

        s.verify(resultMap);

        String error = null;

        if ("00".equals(s.getErrCode())) {
            String payFlowNo = resultMap.get("MerOrderNo");
            PayFlow payFlow = null;
            if (check(payFlowNo)) {
                payFlow = payFlowService.getPayFlowByNo(payFlowNo);

                if (payFlow != null) {

                    if (payFlow.getPayStatus() != 1) {

                        payFlow.setPayStatus(1);
                        try {
                            payFlow.setResParam(new ObjectMapper().writeValueAsString(resultMap));
                        } catch (Exception e) {
                        }

                            Order order = orderService.getOrderDetail(payFlow.getOrderId());
                            if ("0000".equals(resultMap.get("OrderStatus"))) {
                                if (order.getOrderStatus() != 15) {
                                    payFlow.setProcStatus(2);
                                    payFlow.setRemark("订单不是待支付状态[" + order.getOrderStatus() + "]");
                                    error = "订单不是待支付状态[" + order.getOrderStatus() + "]";
                                } else {
                                    orderService.updateOrderStatus(order.getOrderId(), 2);
                                    
                                    SettleData settle = new SettleData();
                                    settle.setBusiId(order.getOrderId());
                                    settle.setBusiType(1);
                                    settle.setCompanyName(orderService.getUserCompanyName(order.getUserId()));
                                    settle.setSettleAmount(order.getOrderAmount());
                                    settle.setSupId(order.getSupId());
                                    settle.setTotalNum(orderService.getGoodsSum(order.getOrderId()));
                                    
                                    settleService.insertSettleData(settle);
                                    
                                    payFlow.setProcStatus(1);
                                    payFlow.setRemark("订单支付成功");
                                    try {
                                        CpiService.getInstance().orderConfirm(order.getSupId(), order.getOrderId(), order.getSupOrderId());
                                    } catch (Exception e) {
                                        payFlow.setProcStatus(2);
                                        payFlow.setRemark("支付成功，但供应商确认订单失败");
                                        error = "支付成功，但供应商确认订单失败";
                                        logger.error("供应商确认订单失败", e);
                                    }
                                }
                            } else {
                                payFlow.setProcStatus(2);
                                payFlow.setRemark("订单支付失败");
                                error = "订单支付失败";
                            }

                        payFlowService.updatePayFlow(payFlow);
                    } else {
                        if (payFlow.getProcStatus() == 2) {
                            error = payFlow.getRemark();
                        }
                    }
                } else {
                    error = "支付流水无效";
                }

                release(payFlowNo);
            } else {
                payFlow = payFlowService.getPayFlowByNo(payFlowNo);
                if (payFlow.getProcStatus() == 2) {
                    error = payFlow.getRemark();
                }
            }

            try {
                if (type.equals("notify") || type.equals("refund")) {
                    response.getWriter().write("success");
                } else {
                    if (error != null) {
                        map.put("error", error);
                        return "order/pay_fail";
                    } else {
                        map.put("orderId", payFlow.getOrderId());
                        map.put("payAmount", payFlow.getPayAmount());
                        map.put("payGate", payFlow.getPayGate());
                        return "order/pay_success";
                    }
                }
            } catch (IOException e) {
            }
        } else {
            try {
                if (type.equals("notify") || type.equals("refund")) {
                    response.getWriter().write("fail");
                } else {
                    map.put("error", "支付失败");
                    return "order/pay_fail";
                }
            } catch (IOException e) {
            }
        }
        
        return null;
    }
    
    @RequestMapping("/detail")
    public String detail(HttpServletRequest req, HttpSession session, Map<String, Object> map) {
        User user = Permission.check(session, UserRole.NONE);
        // 订单编号
        String o = req.getParameter("o");

        logger.info("订单详情-o["+o+"]");
        
        if (StringUtils.isEmpty(o)) {
            throw new PageNotFoundException();
        }
        
        Order order = orderService.getOrderDetail(o);
        
        if (o == null) {
            throw new PageNotFoundException();
        }
        
        
        map.put("order", order);
        
        
        return "order/detail";
    }

    private List<String> locks = new ArrayList<String>();

    private synchronized boolean check(String payFlow) {
        if (locks.contains(payFlow)) {
            return false;
        }

        locks.add(payFlow);
        return true;
    }

    private synchronized void release(String payFlow) {
        locks.remove(payFlow);
    }

}
