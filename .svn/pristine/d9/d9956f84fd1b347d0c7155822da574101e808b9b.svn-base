package com.avic.supplier.controllers;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.avic.common.constants.SessionKeys;
import com.avic.market.cpi.CpiService;
import com.avic.market.cpi.exceptions.NoSuchSupplierException;
import com.avic.market.cpi.exceptions.ServiceExecutionFailedException;
import com.avic.supplier.models.SupArea;
import com.avic.supplier.models.SupplierGoodsImage;
import com.avic.supplier.models.SupplierGoodsInfo;
import com.avic.supplier.services.SupAreaService;
import com.avic.supplier.services.SupplierGoodsInfoService;
import com.avic.supplier.utils.CodeConstants;
import com.avic.supplier.utils.ReadExcel;

@Controller
@RequestMapping("/goodsInfo")
public class SupplierGoodsInfoController {
	protected static final Log logger = LogFactory
			.getLog(SupplierGoodsInfoController.class);

	@Autowired
	SupplierGoodsInfoService supplierGoodsInfoService;

	@Autowired
	SupAreaService areaService;

	/**
	 * 页面初始化方法
	 * 
	 * @param map
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping("")
	public String index(Map<String, Object> map,HttpSession httpSession,
			@ModelAttribute("supplierGoodsInfo") SupplierGoodsInfo supplierGoodsInfo) throws UnsupportedEncodingException {
		String supId = httpSession.getAttribute(SessionKeys.SUP_ID).toString();
		supplierGoodsInfo.setSupId(supId);
		supplierGoodsInfo.setDeleteFlag("0");
		List<SupplierGoodsInfo> supplierGoodsInfoList = supplierGoodsInfoService
				.querySupplierGoodsInfoList(supplierGoodsInfo);
		map.put("supplierGoodsInfoList", supplierGoodsInfoList);
		List<SupplierGoodsInfo> bankNameList = supplierGoodsInfoService
				.querySupplierGoodsInfoBrandNameList(supplierGoodsInfo);
		map.put("bankNameList", bankNameList);
		map.put("queryParam", supplierGoodsInfo);
		//分页信息
        String page = String.valueOf(supplierGoodsInfo.getPage());
        int total = supplierGoodsInfoService.querySupplierGoodsInfoListCount(supplierGoodsInfo);

        int pages = (int) Math.ceil((double) total / supplierGoodsInfo.getPageSize());
//        map.put("ok", "0");
        map.put("page", page);
        map.put("total", total);
        map.put("pages", pages);
        map.put("pageAction","supplier/goodsInfo?"
        		+ "&brandName="+(supplierGoodsInfo.getBrandName() == null ?"":supplierGoodsInfo.getBrandName())
        		+ "&goodsStatus="+(supplierGoodsInfo.getGoodsStatus() == null ?"":supplierGoodsInfo.getGoodsStatus())
        		+ "&goodsDesc="+URLEncoder.encode((supplierGoodsInfo.getGoodsDesc() == null ?"":supplierGoodsInfo.getGoodsDesc()),"GBK")
        		+ "&createDateStar="+(supplierGoodsInfo.getCreateDateStar() == null ?"":supplierGoodsInfo.getCreateDateStar())
        		+ "&createDateEnd="+(supplierGoodsInfo.getCreateDateEnd() == null ?"":supplierGoodsInfo.getCreateDateEnd())
                + "&page=%PAGE%");
		return "goods/supplier_goods_info";
	}

//	/**
//	 * 页面查询
//	 * 
//	 * @param map
//	 * @return
//	 */
//	@RequestMapping("/query")
//	public String query(
//			Map<String, Object> map,
//			@ModelAttribute("supplierGoodsInfo") SupplierGoodsInfo supplierGoodsInfo,HttpSession httpSession) {
//		String supId = httpSession.getAttribute(SessionKeys.SUP_ID).toString();
//		supplierGoodsInfo.setSupId(supId);
//		supplierGoodsInfo.setDeleteFlag("0");
//		List<SupplierGoodsInfo> supplierGoodsInfoList = supplierGoodsInfoService
//				.querySupplierGoodsInfoList(supplierGoodsInfo);
//		map.put("supplierGoodsInfoList", supplierGoodsInfoList);
//		List<SupplierGoodsInfo> bankNameList = supplierGoodsInfoService
//				.querySupplierGoodsInfoBrandNameList(supplierGoodsInfo);
//		map.put("bankNameList", bankNameList);
//		map.put("queryParam", supplierGoodsInfo);
//		return "goods/supplier_goods_info";
//	}
	/**
	 * 查询商品详细信息
	 * 
	 * @param map
	 * @param goodsId
	 * @return
	 */
	@RequestMapping("/queryDetailed/{supGoodsId}")
	public String queryDetailed(Map<String, Object> map,
			@PathVariable("supGoodsId") String supGoodsId,HttpSession httpSession) {
		logger.info("查询金额");
		String supId = httpSession.getAttribute(SessionKeys.SUP_ID).toString();
		SupplierGoodsInfo supplierGoodsInfo = new SupplierGoodsInfo();
		supplierGoodsInfo.setSupId(supId);
		supplierGoodsInfo.setDeleteFlag("0");
		supplierGoodsInfo.setSupGoodsId(supGoodsId);
		List<SupplierGoodsInfo> supplierGoodsInfoList = supplierGoodsInfoService
				.querySupplierGoodsInfoList(supplierGoodsInfo);
		map.put("supplierGoodsInfo", supplierGoodsInfoList.get(0));
		SupplierGoodsImage supplierGoodsImage = new SupplierGoodsImage();
		supplierGoodsImage.setSupId(Integer.parseInt(supId));
		supplierGoodsImage.setSupGoodsId(supGoodsId);
		List<SupplierGoodsImage> supplierGoodsImageList = supplierGoodsInfoService.queryGoodsImg(supplierGoodsImage);
		map.put("supplierGoodsImageList", supplierGoodsImageList);
		// 获取详细成交价格
		SupplierGoodsInfo orderDataParam = new SupplierGoodsInfo();
		orderDataParam.setSupGoodsId(supGoodsId);
		List<SupplierGoodsInfo> orderDataList= supplierGoodsInfoService.queryOrderData(orderDataParam);
		map.put("orderDataList", orderDataList);
		// 获取统计价格
		SupplierGoodsInfo reportOrderDataParam = new SupplierGoodsInfo();
		reportOrderDataParam.setSupGoodsId(supGoodsId);
		SupplierGoodsInfo reportOrderData = supplierGoodsInfoService.queryReportOrderData(reportOrderDataParam);
		if (orderDataList.size() != 0) {
			reportOrderData.setNowPrice(orderDataList.get(0).getGoodsPrice());
		}
		//分页信息
        String page = String.valueOf(orderDataParam.getPage());
        int total = supplierGoodsInfoService.queryOrderDataCount(orderDataParam);

        int pages = (int) Math.ceil((double) total / orderDataParam.getPageSize());
        
        map.put("page", page);
        map.put("total", total);
        map.put("pages", pages);
        map.put("pageAction","supplier/goodsInfo/queryDetailed/"+supGoodsId+"?"
                + "page=%PAGE%");
		map.put("reportOrderData", reportOrderData);
		return "goods/supplier_goods_info_check";
	}
	/**
	 * 查询价格
	 * 
	 * @param map
	 * @param goodsId
	 * @return
	 */
	@RequestMapping("/queryPrice/{supGoodsId}")
	public String queryPrice(Map<String, Object> map,
			@PathVariable("supGoodsId") String supGoodsId,HttpSession httpSession) {
		logger.info("查询金额");
		String supId = httpSession.getAttribute(SessionKeys.SUP_ID).toString();
		SupplierGoodsInfo supplierGoodsInfo = new SupplierGoodsInfo();
		supplierGoodsInfo.setSupId(supId);
		supplierGoodsInfo.setDeleteFlag("0");
		supplierGoodsInfo.setSupGoodsId(supGoodsId);
		List<SupplierGoodsInfo> supplierGoodsInfoList = supplierGoodsInfoService
				.querySupplierGoodsInfoList(supplierGoodsInfo);
		map.put("supplierGoodsPrice", supplierGoodsInfoList.get(0));
		return "goods/supplier_goods_info_price";
	}

	/**
	 * 查询存库
	 * 
	 * @param map
	 * @return
	 * @throws ServiceExecutionFailedException
	 * @throws NoSuchSupplierException
	 */
	@RequestMapping("/queryStore/{supGoodsId}")
	public String queryStore(Map<String, Object> map,
			@PathVariable("supGoodsId") String supGoodsId,HttpSession httpSession)
			throws NoSuchSupplierException, ServiceExecutionFailedException {
		logger.info("查询库存");
		String supId = httpSession.getAttribute(SessionKeys.SUP_ID).toString();
		// 取得商品信息
		SupplierGoodsInfo supplierGoodsInfo = new SupplierGoodsInfo();
		supplierGoodsInfo.setSupId(supId);
		supplierGoodsInfo.setDeleteFlag("0");
		supplierGoodsInfo.setSupGoodsId(supGoodsId);
		List<SupplierGoodsInfo> supplierGoodsInfoList = supplierGoodsInfoService
				.querySupplierGoodsInfoList(supplierGoodsInfo);
		map.put("supplierGoodsPrice", supplierGoodsInfoList.get(0));
		// 取得地区信息
		SupArea supArea = new SupArea();
		supArea.setSupID(httpSession.getAttribute(SessionKeys.SUP_ID).toString());
		// 加载地区信息
		List<SupArea> areas = areaService.queryAreas(supArea);
		map.put("areasList", areas);
		return "goods/supplier_goods_info_store";
	}

	/**
	 * 删除转入回收站
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/updateDeleteFlag/{supGoodsId}")
	public String updateDeleteFlag(Map<String, Object> map,
			@PathVariable("supGoodsId") String supGoodsId,HttpSession httpSession) {
		logger.info("删除转入回收站");
		String supId = httpSession.getAttribute(SessionKeys.SUP_ID).toString();
		SupplierGoodsInfo supplierGoodsInfo = new SupplierGoodsInfo();
		supplierGoodsInfo.setSupId(supId);
		supplierGoodsInfo.setSupGoodsId(supGoodsId);
		supplierGoodsInfo.setDeleteFlag("1");
		supplierGoodsInfoService.updateDeleteFlag(supplierGoodsInfo);
		return "redirect:/supplier/goodsInfo";
	}

	@RequestMapping("/loadSubArea")
	@ResponseBody
	public Object loadSubArea(@RequestParam("parentId") String parentId,
			HttpSession httpSession)
			throws NoSuchSupplierException, ServiceExecutionFailedException {
		SupArea supArea = new SupArea();
		supArea.setSupParentArea(parentId);
		supArea.setSupID(httpSession.getAttribute(SessionKeys.SUP_ID).toString());
		// 加载地区信息
		List<SupArea> areas = new ArrayList<SupArea>();
		areas = areaService.querySubAreas(supArea);
		return areas;
	}

	@RequestMapping("/queryStoreNumber")
	@ResponseBody
	public Object queryStoreNumber(@RequestParam("area") String area,
			@RequestParam("areaSub") String areaSub,
			@RequestParam("areaLast") String areaLast,
			@RequestParam("supGoodsId") String supGoodsId,
			HttpSession httpSession)
			throws NoSuchSupplierException, ServiceExecutionFailedException {
		// 加载地区信息
		List<String> item = new ArrayList<String>();
		item.add(supGoodsId);
		List<String> item2 = new ArrayList<String>();
		item2.add(area);
		item2.add(areaSub);
		item2.add(areaLast);
		String supId = httpSession.getAttribute(SessionKeys.SUP_ID).toString();
		Map<String, Integer> store = CpiService.getInstance().getGoodsStock(Integer.parseInt(supId),
				item, item2);
		return store;
	}
	/**
	 * 文件上传
	 * @param map
	 * @param httpSession
	 * @param supplierGoodsInfo
	 * @param uploadFiles
	 * @return
	 * @throws NoSuchSupplierException
	 * @throws ServiceExecutionFailedException
	 * @throws IOException
	 */
	@RequestMapping("/uploadFiles")
	public Object uploadFile(Map<String, Object> map,HttpSession httpSession,
			@ModelAttribute("supplierGoodsInfo") SupplierGoodsInfo supplierGoodsInfo,
			 @RequestParam("uploadFile") MultipartFile uploadFiles)
			throws NoSuchSupplierException, ServiceExecutionFailedException, IOException {
		map.put("ok", "0");
		String supId = httpSession.getAttribute(SessionKeys.SUP_ID).toString();
		if (uploadFiles.isEmpty()) {
			map.put("ok", "1");
			map.put("msg", "上传的文件为空文件，请检查问候重新上传！");
		}else {
			String excelVersion = "";
			String old = uploadFiles.getOriginalFilename();
			String postfix = old.substring(old.lastIndexOf("."),old.length());
			if (".xlsx".equals(postfix)) {
				excelVersion="2007";
			}else if (".xls".equals(postfix)) {
				excelVersion="2003";
			}
            try {
            	List<List<String>> supplierGoodsInfos= ReadExcel.readExcelFile(uploadFiles.getInputStream(),excelVersion);
			} catch (Exception e) {
				map.put("ok", "1");
				map.put("msg", "上传的文件解析失败，请使用指定的模板文件！");
			}
		}
		//页面查询
		String reulst = index(map, httpSession, supplierGoodsInfo);
		return reulst;
	}
	
	

}
